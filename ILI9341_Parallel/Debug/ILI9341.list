
ILI9341.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001574  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08001720  08001720  00011720  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08001740  08001740  00011740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08001748  08001748  00011748  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800174c  0800174c  0001174c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0001e858  20000000  08001750  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0003e858  2**0
                  CONTENTS
  8 .bss          00000074  2001e858  2001e858  0003e858  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  2001e8cc  2001e8cc  0003e858  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0003e858  2**0
                  CONTENTS, READONLY
 11 .debug_info   0000fb37  00000000  00000000  0003e888  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00002272  00000000  00000000  0004e3bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000347e  00000000  00000000  00050631  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000005d0  00000000  00000000  00053ab0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000898  00000000  00000000  00054080  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   000036a2  00000000  00000000  00054918  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0000280a  00000000  00000000  00057fba  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0005a7c4  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00000e8c  00000000  00000000  0005a840  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2001e858 	.word	0x2001e858
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08001708 	.word	0x08001708

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	2001e85c 	.word	0x2001e85c
 80001e8:	08001708 	.word	0x08001708

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b97a 	b.w	80004f8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	468c      	mov	ip, r1
 8000222:	460d      	mov	r5, r1
 8000224:	4604      	mov	r4, r0
 8000226:	9e08      	ldr	r6, [sp, #32]
 8000228:	2b00      	cmp	r3, #0
 800022a:	d151      	bne.n	80002d0 <__udivmoddi4+0xb4>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d96d      	bls.n	800030e <__udivmoddi4+0xf2>
 8000232:	fab2 fe82 	clz	lr, r2
 8000236:	f1be 0f00 	cmp.w	lr, #0
 800023a:	d00b      	beq.n	8000254 <__udivmoddi4+0x38>
 800023c:	f1ce 0c20 	rsb	ip, lr, #32
 8000240:	fa01 f50e 	lsl.w	r5, r1, lr
 8000244:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000248:	fa02 f70e 	lsl.w	r7, r2, lr
 800024c:	ea4c 0c05 	orr.w	ip, ip, r5
 8000250:	fa00 f40e 	lsl.w	r4, r0, lr
 8000254:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000258:	0c25      	lsrs	r5, r4, #16
 800025a:	fbbc f8fa 	udiv	r8, ip, sl
 800025e:	fa1f f987 	uxth.w	r9, r7
 8000262:	fb0a cc18 	mls	ip, sl, r8, ip
 8000266:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800026a:	fb08 f309 	mul.w	r3, r8, r9
 800026e:	42ab      	cmp	r3, r5
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x6c>
 8000272:	19ed      	adds	r5, r5, r7
 8000274:	f108 32ff 	add.w	r2, r8, #4294967295
 8000278:	f080 8123 	bcs.w	80004c2 <__udivmoddi4+0x2a6>
 800027c:	42ab      	cmp	r3, r5
 800027e:	f240 8120 	bls.w	80004c2 <__udivmoddi4+0x2a6>
 8000282:	f1a8 0802 	sub.w	r8, r8, #2
 8000286:	443d      	add	r5, r7
 8000288:	1aed      	subs	r5, r5, r3
 800028a:	b2a4      	uxth	r4, r4
 800028c:	fbb5 f0fa 	udiv	r0, r5, sl
 8000290:	fb0a 5510 	mls	r5, sl, r0, r5
 8000294:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000298:	fb00 f909 	mul.w	r9, r0, r9
 800029c:	45a1      	cmp	r9, r4
 800029e:	d909      	bls.n	80002b4 <__udivmoddi4+0x98>
 80002a0:	19e4      	adds	r4, r4, r7
 80002a2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a6:	f080 810a 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80002aa:	45a1      	cmp	r9, r4
 80002ac:	f240 8107 	bls.w	80004be <__udivmoddi4+0x2a2>
 80002b0:	3802      	subs	r0, #2
 80002b2:	443c      	add	r4, r7
 80002b4:	eba4 0409 	sub.w	r4, r4, r9
 80002b8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002bc:	2100      	movs	r1, #0
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d061      	beq.n	8000386 <__udivmoddi4+0x16a>
 80002c2:	fa24 f40e 	lsr.w	r4, r4, lr
 80002c6:	2300      	movs	r3, #0
 80002c8:	6034      	str	r4, [r6, #0]
 80002ca:	6073      	str	r3, [r6, #4]
 80002cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xc8>
 80002d4:	2e00      	cmp	r6, #0
 80002d6:	d054      	beq.n	8000382 <__udivmoddi4+0x166>
 80002d8:	2100      	movs	r1, #0
 80002da:	e886 0021 	stmia.w	r6, {r0, r5}
 80002de:	4608      	mov	r0, r1
 80002e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e4:	fab3 f183 	clz	r1, r3
 80002e8:	2900      	cmp	r1, #0
 80002ea:	f040 808e 	bne.w	800040a <__udivmoddi4+0x1ee>
 80002ee:	42ab      	cmp	r3, r5
 80002f0:	d302      	bcc.n	80002f8 <__udivmoddi4+0xdc>
 80002f2:	4282      	cmp	r2, r0
 80002f4:	f200 80fa 	bhi.w	80004ec <__udivmoddi4+0x2d0>
 80002f8:	1a84      	subs	r4, r0, r2
 80002fa:	eb65 0503 	sbc.w	r5, r5, r3
 80002fe:	2001      	movs	r0, #1
 8000300:	46ac      	mov	ip, r5
 8000302:	2e00      	cmp	r6, #0
 8000304:	d03f      	beq.n	8000386 <__udivmoddi4+0x16a>
 8000306:	e886 1010 	stmia.w	r6, {r4, ip}
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	b912      	cbnz	r2, 8000316 <__udivmoddi4+0xfa>
 8000310:	2701      	movs	r7, #1
 8000312:	fbb7 f7f2 	udiv	r7, r7, r2
 8000316:	fab7 fe87 	clz	lr, r7
 800031a:	f1be 0f00 	cmp.w	lr, #0
 800031e:	d134      	bne.n	800038a <__udivmoddi4+0x16e>
 8000320:	1beb      	subs	r3, r5, r7
 8000322:	0c3a      	lsrs	r2, r7, #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	2101      	movs	r1, #1
 800032a:	fbb3 f8f2 	udiv	r8, r3, r2
 800032e:	0c25      	lsrs	r5, r4, #16
 8000330:	fb02 3318 	mls	r3, r2, r8, r3
 8000334:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000338:	fb0c f308 	mul.w	r3, ip, r8
 800033c:	42ab      	cmp	r3, r5
 800033e:	d907      	bls.n	8000350 <__udivmoddi4+0x134>
 8000340:	19ed      	adds	r5, r5, r7
 8000342:	f108 30ff 	add.w	r0, r8, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x132>
 8000348:	42ab      	cmp	r3, r5
 800034a:	f200 80d1 	bhi.w	80004f0 <__udivmoddi4+0x2d4>
 800034e:	4680      	mov	r8, r0
 8000350:	1aed      	subs	r5, r5, r3
 8000352:	b2a3      	uxth	r3, r4
 8000354:	fbb5 f0f2 	udiv	r0, r5, r2
 8000358:	fb02 5510 	mls	r5, r2, r0, r5
 800035c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000360:	fb0c fc00 	mul.w	ip, ip, r0
 8000364:	45a4      	cmp	ip, r4
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x15c>
 8000368:	19e4      	adds	r4, r4, r7
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x15a>
 8000370:	45a4      	cmp	ip, r4
 8000372:	f200 80b8 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000376:	4618      	mov	r0, r3
 8000378:	eba4 040c 	sub.w	r4, r4, ip
 800037c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000380:	e79d      	b.n	80002be <__udivmoddi4+0xa2>
 8000382:	4631      	mov	r1, r6
 8000384:	4630      	mov	r0, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	f1ce 0420 	rsb	r4, lr, #32
 800038e:	fa05 f30e 	lsl.w	r3, r5, lr
 8000392:	fa07 f70e 	lsl.w	r7, r7, lr
 8000396:	fa20 f804 	lsr.w	r8, r0, r4
 800039a:	0c3a      	lsrs	r2, r7, #16
 800039c:	fa25 f404 	lsr.w	r4, r5, r4
 80003a0:	ea48 0803 	orr.w	r8, r8, r3
 80003a4:	fbb4 f1f2 	udiv	r1, r4, r2
 80003a8:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003ac:	fb02 4411 	mls	r4, r2, r1, r4
 80003b0:	fa1f fc87 	uxth.w	ip, r7
 80003b4:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003b8:	fb01 f30c 	mul.w	r3, r1, ip
 80003bc:	42ab      	cmp	r3, r5
 80003be:	fa00 f40e 	lsl.w	r4, r0, lr
 80003c2:	d909      	bls.n	80003d8 <__udivmoddi4+0x1bc>
 80003c4:	19ed      	adds	r5, r5, r7
 80003c6:	f101 30ff 	add.w	r0, r1, #4294967295
 80003ca:	f080 808a 	bcs.w	80004e2 <__udivmoddi4+0x2c6>
 80003ce:	42ab      	cmp	r3, r5
 80003d0:	f240 8087 	bls.w	80004e2 <__udivmoddi4+0x2c6>
 80003d4:	3902      	subs	r1, #2
 80003d6:	443d      	add	r5, r7
 80003d8:	1aeb      	subs	r3, r5, r3
 80003da:	fa1f f588 	uxth.w	r5, r8
 80003de:	fbb3 f0f2 	udiv	r0, r3, r2
 80003e2:	fb02 3310 	mls	r3, r2, r0, r3
 80003e6:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003ea:	fb00 f30c 	mul.w	r3, r0, ip
 80003ee:	42ab      	cmp	r3, r5
 80003f0:	d907      	bls.n	8000402 <__udivmoddi4+0x1e6>
 80003f2:	19ed      	adds	r5, r5, r7
 80003f4:	f100 38ff 	add.w	r8, r0, #4294967295
 80003f8:	d26f      	bcs.n	80004da <__udivmoddi4+0x2be>
 80003fa:	42ab      	cmp	r3, r5
 80003fc:	d96d      	bls.n	80004da <__udivmoddi4+0x2be>
 80003fe:	3802      	subs	r0, #2
 8000400:	443d      	add	r5, r7
 8000402:	1aeb      	subs	r3, r5, r3
 8000404:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000408:	e78f      	b.n	800032a <__udivmoddi4+0x10e>
 800040a:	f1c1 0720 	rsb	r7, r1, #32
 800040e:	fa22 f807 	lsr.w	r8, r2, r7
 8000412:	408b      	lsls	r3, r1
 8000414:	fa05 f401 	lsl.w	r4, r5, r1
 8000418:	ea48 0303 	orr.w	r3, r8, r3
 800041c:	fa20 fe07 	lsr.w	lr, r0, r7
 8000420:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000424:	40fd      	lsrs	r5, r7
 8000426:	ea4e 0e04 	orr.w	lr, lr, r4
 800042a:	fbb5 f9fc 	udiv	r9, r5, ip
 800042e:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000432:	fb0c 5519 	mls	r5, ip, r9, r5
 8000436:	fa1f f883 	uxth.w	r8, r3
 800043a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800043e:	fb09 f408 	mul.w	r4, r9, r8
 8000442:	42ac      	cmp	r4, r5
 8000444:	fa02 f201 	lsl.w	r2, r2, r1
 8000448:	fa00 fa01 	lsl.w	sl, r0, r1
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x244>
 800044e:	18ed      	adds	r5, r5, r3
 8000450:	f109 30ff 	add.w	r0, r9, #4294967295
 8000454:	d243      	bcs.n	80004de <__udivmoddi4+0x2c2>
 8000456:	42ac      	cmp	r4, r5
 8000458:	d941      	bls.n	80004de <__udivmoddi4+0x2c2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	441d      	add	r5, r3
 8000460:	1b2d      	subs	r5, r5, r4
 8000462:	fa1f fe8e 	uxth.w	lr, lr
 8000466:	fbb5 f0fc 	udiv	r0, r5, ip
 800046a:	fb0c 5510 	mls	r5, ip, r0, r5
 800046e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000472:	fb00 f808 	mul.w	r8, r0, r8
 8000476:	45a0      	cmp	r8, r4
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x26e>
 800047a:	18e4      	adds	r4, r4, r3
 800047c:	f100 35ff 	add.w	r5, r0, #4294967295
 8000480:	d229      	bcs.n	80004d6 <__udivmoddi4+0x2ba>
 8000482:	45a0      	cmp	r8, r4
 8000484:	d927      	bls.n	80004d6 <__udivmoddi4+0x2ba>
 8000486:	3802      	subs	r0, #2
 8000488:	441c      	add	r4, r3
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	eba4 0408 	sub.w	r4, r4, r8
 8000492:	fba0 8902 	umull	r8, r9, r0, r2
 8000496:	454c      	cmp	r4, r9
 8000498:	46c6      	mov	lr, r8
 800049a:	464d      	mov	r5, r9
 800049c:	d315      	bcc.n	80004ca <__udivmoddi4+0x2ae>
 800049e:	d012      	beq.n	80004c6 <__udivmoddi4+0x2aa>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x29c>
 80004a2:	ebba 030e 	subs.w	r3, sl, lr
 80004a6:	eb64 0405 	sbc.w	r4, r4, r5
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40cb      	lsrs	r3, r1
 80004b0:	431f      	orrs	r7, r3
 80004b2:	40cc      	lsrs	r4, r1
 80004b4:	6037      	str	r7, [r6, #0]
 80004b6:	6074      	str	r4, [r6, #4]
 80004b8:	2100      	movs	r1, #0
 80004ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004be:	4618      	mov	r0, r3
 80004c0:	e6f8      	b.n	80002b4 <__udivmoddi4+0x98>
 80004c2:	4690      	mov	r8, r2
 80004c4:	e6e0      	b.n	8000288 <__udivmoddi4+0x6c>
 80004c6:	45c2      	cmp	sl, r8
 80004c8:	d2ea      	bcs.n	80004a0 <__udivmoddi4+0x284>
 80004ca:	ebb8 0e02 	subs.w	lr, r8, r2
 80004ce:	eb69 0503 	sbc.w	r5, r9, r3
 80004d2:	3801      	subs	r0, #1
 80004d4:	e7e4      	b.n	80004a0 <__udivmoddi4+0x284>
 80004d6:	4628      	mov	r0, r5
 80004d8:	e7d7      	b.n	800048a <__udivmoddi4+0x26e>
 80004da:	4640      	mov	r0, r8
 80004dc:	e791      	b.n	8000402 <__udivmoddi4+0x1e6>
 80004de:	4681      	mov	r9, r0
 80004e0:	e7be      	b.n	8000460 <__udivmoddi4+0x244>
 80004e2:	4601      	mov	r1, r0
 80004e4:	e778      	b.n	80003d8 <__udivmoddi4+0x1bc>
 80004e6:	3802      	subs	r0, #2
 80004e8:	443c      	add	r4, r7
 80004ea:	e745      	b.n	8000378 <__udivmoddi4+0x15c>
 80004ec:	4608      	mov	r0, r1
 80004ee:	e708      	b.n	8000302 <__udivmoddi4+0xe6>
 80004f0:	f1a8 0802 	sub.w	r8, r8, #2
 80004f4:	443d      	add	r5, r7
 80004f6:	e72b      	b.n	8000350 <__udivmoddi4+0x134>

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004fc:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004fe:	4a0e      	ldr	r2, [pc, #56]	; (8000538 <HAL_InitTick+0x3c>)
 8000500:	4b0e      	ldr	r3, [pc, #56]	; (800053c <HAL_InitTick+0x40>)
{
 8000502:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000504:	7818      	ldrb	r0, [r3, #0]
 8000506:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800050a:	fbb3 f3f0 	udiv	r3, r3, r0
 800050e:	6810      	ldr	r0, [r2, #0]
 8000510:	fbb0 f0f3 	udiv	r0, r0, r3
 8000514:	f000 f89c 	bl	8000650 <HAL_SYSTICK_Config>
 8000518:	4604      	mov	r4, r0
 800051a:	b958      	cbnz	r0, 8000534 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800051c:	2d0f      	cmp	r5, #15
 800051e:	d809      	bhi.n	8000534 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000520:	4602      	mov	r2, r0
 8000522:	4629      	mov	r1, r5
 8000524:	f04f 30ff 	mov.w	r0, #4294967295
 8000528:	f000 f85e 	bl	80005e8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800052c:	4b04      	ldr	r3, [pc, #16]	; (8000540 <HAL_InitTick+0x44>)
 800052e:	4620      	mov	r0, r4
 8000530:	601d      	str	r5, [r3, #0]
 8000532:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000534:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000536:	bd38      	pop	{r3, r4, r5, pc}
 8000538:	2001e854 	.word	0x2001e854
 800053c:	20000000 	.word	0x20000000
 8000540:	20000004 	.word	0x20000004

08000544 <HAL_Init>:
{
 8000544:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000546:	4b0b      	ldr	r3, [pc, #44]	; (8000574 <HAL_Init+0x30>)
 8000548:	681a      	ldr	r2, [r3, #0]
 800054a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800054e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000550:	681a      	ldr	r2, [r3, #0]
 8000552:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000556:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000558:	681a      	ldr	r2, [r3, #0]
 800055a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800055e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000560:	2003      	movs	r0, #3
 8000562:	f000 f82f 	bl	80005c4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000566:	2000      	movs	r0, #0
 8000568:	f7ff ffc8 	bl	80004fc <HAL_InitTick>
  HAL_MspInit();
 800056c:	f001 f800 	bl	8001570 <HAL_MspInit>
}
 8000570:	2000      	movs	r0, #0
 8000572:	bd08      	pop	{r3, pc}
 8000574:	40023c00 	.word	0x40023c00

08000578 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000578:	4a03      	ldr	r2, [pc, #12]	; (8000588 <HAL_IncTick+0x10>)
 800057a:	4b04      	ldr	r3, [pc, #16]	; (800058c <HAL_IncTick+0x14>)
 800057c:	6811      	ldr	r1, [r2, #0]
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	440b      	add	r3, r1
 8000582:	6013      	str	r3, [r2, #0]
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop
 8000588:	2001e878 	.word	0x2001e878
 800058c:	20000000 	.word	0x20000000

08000590 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000590:	4b01      	ldr	r3, [pc, #4]	; (8000598 <HAL_GetTick+0x8>)
 8000592:	6818      	ldr	r0, [r3, #0]
}
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	2001e878 	.word	0x2001e878

0800059c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800059c:	b538      	push	{r3, r4, r5, lr}
 800059e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80005a0:	f7ff fff6 	bl	8000590 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005a4:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80005a6:	bf1c      	itt	ne
 80005a8:	4b05      	ldrne	r3, [pc, #20]	; (80005c0 <HAL_Delay+0x24>)
 80005aa:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 80005ac:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 80005ae:	bf18      	it	ne
 80005b0:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005b2:	f7ff ffed 	bl	8000590 <HAL_GetTick>
 80005b6:	1b40      	subs	r0, r0, r5
 80005b8:	4284      	cmp	r4, r0
 80005ba:	d8fa      	bhi.n	80005b2 <HAL_Delay+0x16>
  {
  }
}
 80005bc:	bd38      	pop	{r3, r4, r5, pc}
 80005be:	bf00      	nop
 80005c0:	20000000 	.word	0x20000000

080005c4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005c4:	4a07      	ldr	r2, [pc, #28]	; (80005e4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80005c6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005c8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80005cc:	041b      	lsls	r3, r3, #16
 80005ce:	0c1b      	lsrs	r3, r3, #16
 80005d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80005d4:	0200      	lsls	r0, r0, #8
 80005d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005da:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80005de:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80005e0:	60d3      	str	r3, [r2, #12]
 80005e2:	4770      	bx	lr
 80005e4:	e000ed00 	.word	0xe000ed00

080005e8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005e8:	4b17      	ldr	r3, [pc, #92]	; (8000648 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	68dc      	ldr	r4, [r3, #12]
 80005ee:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005f2:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005f6:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005f8:	2b04      	cmp	r3, #4
 80005fa:	bf28      	it	cs
 80005fc:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005fe:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000600:	f04f 0501 	mov.w	r5, #1
 8000604:	fa05 f303 	lsl.w	r3, r5, r3
 8000608:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800060c:	bf8c      	ite	hi
 800060e:	3c03      	subhi	r4, #3
 8000610:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000612:	4019      	ands	r1, r3
 8000614:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000616:	fa05 f404 	lsl.w	r4, r5, r4
 800061a:	3c01      	subs	r4, #1
 800061c:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 800061e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000620:	ea42 0201 	orr.w	r2, r2, r1
 8000624:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000628:	bfaf      	iteee	ge
 800062a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800062e:	f000 000f 	andlt.w	r0, r0, #15
 8000632:	4b06      	ldrlt	r3, [pc, #24]	; (800064c <HAL_NVIC_SetPriority+0x64>)
 8000634:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000636:	bfa5      	ittet	ge
 8000638:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 800063c:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800063e:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000640:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000644:	bd30      	pop	{r4, r5, pc}
 8000646:	bf00      	nop
 8000648:	e000ed00 	.word	0xe000ed00
 800064c:	e000ed14 	.word	0xe000ed14

08000650 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000650:	3801      	subs	r0, #1
 8000652:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000656:	d20a      	bcs.n	800066e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000658:	4b06      	ldr	r3, [pc, #24]	; (8000674 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800065a:	4a07      	ldr	r2, [pc, #28]	; (8000678 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800065c:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800065e:	21f0      	movs	r1, #240	; 0xf0
 8000660:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000664:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000666:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000668:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800066e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	e000e010 	.word	0xe000e010
 8000678:	e000ed00 	.word	0xe000ed00

0800067c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800067c:	4b04      	ldr	r3, [pc, #16]	; (8000690 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800067e:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000680:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000682:	bf0c      	ite	eq
 8000684:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000688:	f022 0204 	bicne.w	r2, r2, #4
 800068c:	601a      	str	r2, [r3, #0]
 800068e:	4770      	bx	lr
 8000690:	e000e010 	.word	0xe000e010

08000694 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000694:	4770      	bx	lr

08000696 <HAL_SYSTICK_IRQHandler>:
{
 8000696:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000698:	f7ff fffc 	bl	8000694 <HAL_SYSTICK_Callback>
 800069c:	bd08      	pop	{r3, pc}
	...

080006a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80006a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80006a4:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006a6:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006a8:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 8000870 <HAL_GPIO_Init+0x1d0>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80006ac:	4a6e      	ldr	r2, [pc, #440]	; (8000868 <HAL_GPIO_Init+0x1c8>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80006ae:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 8000874 <HAL_GPIO_Init+0x1d4>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006b2:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80006b4:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 80006b6:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006ba:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 80006bc:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006c0:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 80006c4:	45b6      	cmp	lr, r6
 80006c6:	f040 80b6 	bne.w	8000836 <HAL_GPIO_Init+0x196>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80006ca:	684c      	ldr	r4, [r1, #4]
 80006cc:	f024 0710 	bic.w	r7, r4, #16
 80006d0:	2f02      	cmp	r7, #2
 80006d2:	d116      	bne.n	8000702 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 80006d4:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80006d8:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80006dc:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80006e0:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80006e4:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80006e8:	f04f 0c0f 	mov.w	ip, #15
 80006ec:	fa0c fc0b 	lsl.w	ip, ip, fp
 80006f0:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80006f4:	690d      	ldr	r5, [r1, #16]
 80006f6:	fa05 f50b 	lsl.w	r5, r5, fp
 80006fa:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 80006fe:	f8ca 5020 	str.w	r5, [sl, #32]
 8000702:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000706:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000708:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800070c:	fa05 f50a 	lsl.w	r5, r5, sl
 8000710:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000712:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000716:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800071a:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800071e:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000720:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000724:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000726:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800072a:	d811      	bhi.n	8000750 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 800072c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800072e:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000732:	68cf      	ldr	r7, [r1, #12]
 8000734:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000738:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 800073c:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800073e:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000740:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000744:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000748:	409f      	lsls	r7, r3
 800074a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 800074e:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000750:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000752:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000754:	688f      	ldr	r7, [r1, #8]
 8000756:	fa07 f70a 	lsl.w	r7, r7, sl
 800075a:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 800075c:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800075e:	00e5      	lsls	r5, r4, #3
 8000760:	d569      	bpl.n	8000836 <HAL_GPIO_Init+0x196>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000762:	f04f 0b00 	mov.w	fp, #0
 8000766:	f8cd b00c 	str.w	fp, [sp, #12]
 800076a:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800076e:	4d3f      	ldr	r5, [pc, #252]	; (800086c <HAL_GPIO_Init+0x1cc>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000770:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000774:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000778:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 800077c:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000780:	9703      	str	r7, [sp, #12]
 8000782:	9f03      	ldr	r7, [sp, #12]
 8000784:	f023 0703 	bic.w	r7, r3, #3
 8000788:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 800078c:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000790:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000794:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000798:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800079c:	f04f 0e0f 	mov.w	lr, #15
 80007a0:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007a4:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80007a6:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007aa:	d04b      	beq.n	8000844 <HAL_GPIO_Init+0x1a4>
 80007ac:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007b0:	42a8      	cmp	r0, r5
 80007b2:	d049      	beq.n	8000848 <HAL_GPIO_Init+0x1a8>
 80007b4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007b8:	42a8      	cmp	r0, r5
 80007ba:	d047      	beq.n	800084c <HAL_GPIO_Init+0x1ac>
 80007bc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007c0:	42a8      	cmp	r0, r5
 80007c2:	d045      	beq.n	8000850 <HAL_GPIO_Init+0x1b0>
 80007c4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007c8:	42a8      	cmp	r0, r5
 80007ca:	d043      	beq.n	8000854 <HAL_GPIO_Init+0x1b4>
 80007cc:	4548      	cmp	r0, r9
 80007ce:	d043      	beq.n	8000858 <HAL_GPIO_Init+0x1b8>
 80007d0:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80007d4:	42a8      	cmp	r0, r5
 80007d6:	d041      	beq.n	800085c <HAL_GPIO_Init+0x1bc>
 80007d8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007dc:	42a8      	cmp	r0, r5
 80007de:	d03f      	beq.n	8000860 <HAL_GPIO_Init+0x1c0>
 80007e0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007e4:	42a8      	cmp	r0, r5
 80007e6:	d03d      	beq.n	8000864 <HAL_GPIO_Init+0x1c4>
 80007e8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007ec:	42a8      	cmp	r0, r5
 80007ee:	bf14      	ite	ne
 80007f0:	250a      	movne	r5, #10
 80007f2:	2509      	moveq	r5, #9
 80007f4:	fa05 f50c 	lsl.w	r5, r5, ip
 80007f8:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 80007fc:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 80007fe:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000800:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000802:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000806:	bf0c      	ite	eq
 8000808:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800080a:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 800080c:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 800080e:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000810:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000814:	bf0c      	ite	eq
 8000816:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000818:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 800081a:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800081c:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800081e:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000822:	bf0c      	ite	eq
 8000824:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000826:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8000828:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 800082a:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800082c:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 800082e:	bf54      	ite	pl
 8000830:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8000832:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8000834:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000836:	3301      	adds	r3, #1
 8000838:	2b10      	cmp	r3, #16
 800083a:	f47f af3c 	bne.w	80006b6 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 800083e:	b005      	add	sp, #20
 8000840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000844:	465d      	mov	r5, fp
 8000846:	e7d5      	b.n	80007f4 <HAL_GPIO_Init+0x154>
 8000848:	2501      	movs	r5, #1
 800084a:	e7d3      	b.n	80007f4 <HAL_GPIO_Init+0x154>
 800084c:	2502      	movs	r5, #2
 800084e:	e7d1      	b.n	80007f4 <HAL_GPIO_Init+0x154>
 8000850:	2503      	movs	r5, #3
 8000852:	e7cf      	b.n	80007f4 <HAL_GPIO_Init+0x154>
 8000854:	2504      	movs	r5, #4
 8000856:	e7cd      	b.n	80007f4 <HAL_GPIO_Init+0x154>
 8000858:	2505      	movs	r5, #5
 800085a:	e7cb      	b.n	80007f4 <HAL_GPIO_Init+0x154>
 800085c:	2506      	movs	r5, #6
 800085e:	e7c9      	b.n	80007f4 <HAL_GPIO_Init+0x154>
 8000860:	2507      	movs	r5, #7
 8000862:	e7c7      	b.n	80007f4 <HAL_GPIO_Init+0x154>
 8000864:	2508      	movs	r5, #8
 8000866:	e7c5      	b.n	80007f4 <HAL_GPIO_Init+0x154>
 8000868:	40013c00 	.word	0x40013c00
 800086c:	40020000 	.word	0x40020000
 8000870:	40023800 	.word	0x40023800
 8000874:	40021400 	.word	0x40021400

08000878 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000878:	b10a      	cbz	r2, 800087e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800087a:	6181      	str	r1, [r0, #24]
 800087c:	4770      	bx	lr
 800087e:	0409      	lsls	r1, r1, #16
 8000880:	e7fb      	b.n	800087a <HAL_GPIO_WritePin+0x2>
	...

08000884 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000884:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000888:	4604      	mov	r4, r0
 800088a:	b918      	cbnz	r0, 8000894 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 800088c:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 800088e:	b002      	add	sp, #8
 8000890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000894:	6803      	ldr	r3, [r0, #0]
 8000896:	07dd      	lsls	r5, r3, #31
 8000898:	d410      	bmi.n	80008bc <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800089a:	6823      	ldr	r3, [r4, #0]
 800089c:	0798      	lsls	r0, r3, #30
 800089e:	d458      	bmi.n	8000952 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80008a0:	6823      	ldr	r3, [r4, #0]
 80008a2:	071a      	lsls	r2, r3, #28
 80008a4:	f100 809a 	bmi.w	80009dc <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80008a8:	6823      	ldr	r3, [r4, #0]
 80008aa:	075b      	lsls	r3, r3, #29
 80008ac:	f100 80b8 	bmi.w	8000a20 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80008b0:	69a2      	ldr	r2, [r4, #24]
 80008b2:	2a00      	cmp	r2, #0
 80008b4:	f040 8119 	bne.w	8000aea <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 80008b8:	2000      	movs	r0, #0
 80008ba:	e7e8      	b.n	800088e <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80008bc:	4ba6      	ldr	r3, [pc, #664]	; (8000b58 <HAL_RCC_OscConfig+0x2d4>)
 80008be:	689a      	ldr	r2, [r3, #8]
 80008c0:	f002 020c 	and.w	r2, r2, #12
 80008c4:	2a04      	cmp	r2, #4
 80008c6:	d007      	beq.n	80008d8 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80008c8:	689a      	ldr	r2, [r3, #8]
 80008ca:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80008ce:	2a08      	cmp	r2, #8
 80008d0:	d10a      	bne.n	80008e8 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80008d2:	685b      	ldr	r3, [r3, #4]
 80008d4:	0259      	lsls	r1, r3, #9
 80008d6:	d507      	bpl.n	80008e8 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80008d8:	4b9f      	ldr	r3, [pc, #636]	; (8000b58 <HAL_RCC_OscConfig+0x2d4>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	039a      	lsls	r2, r3, #14
 80008de:	d5dc      	bpl.n	800089a <HAL_RCC_OscConfig+0x16>
 80008e0:	6863      	ldr	r3, [r4, #4]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d1d9      	bne.n	800089a <HAL_RCC_OscConfig+0x16>
 80008e6:	e7d1      	b.n	800088c <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008e8:	6863      	ldr	r3, [r4, #4]
 80008ea:	4d9b      	ldr	r5, [pc, #620]	; (8000b58 <HAL_RCC_OscConfig+0x2d4>)
 80008ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80008f0:	d111      	bne.n	8000916 <HAL_RCC_OscConfig+0x92>
 80008f2:	682b      	ldr	r3, [r5, #0]
 80008f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008f8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80008fa:	f7ff fe49 	bl	8000590 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008fe:	4d96      	ldr	r5, [pc, #600]	; (8000b58 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8000900:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000902:	682b      	ldr	r3, [r5, #0]
 8000904:	039b      	lsls	r3, r3, #14
 8000906:	d4c8      	bmi.n	800089a <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000908:	f7ff fe42 	bl	8000590 <HAL_GetTick>
 800090c:	1b80      	subs	r0, r0, r6
 800090e:	2864      	cmp	r0, #100	; 0x64
 8000910:	d9f7      	bls.n	8000902 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8000912:	2003      	movs	r0, #3
 8000914:	e7bb      	b.n	800088e <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000916:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800091a:	d104      	bne.n	8000926 <HAL_RCC_OscConfig+0xa2>
 800091c:	682b      	ldr	r3, [r5, #0]
 800091e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000922:	602b      	str	r3, [r5, #0]
 8000924:	e7e5      	b.n	80008f2 <HAL_RCC_OscConfig+0x6e>
 8000926:	682a      	ldr	r2, [r5, #0]
 8000928:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800092c:	602a      	str	r2, [r5, #0]
 800092e:	682a      	ldr	r2, [r5, #0]
 8000930:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000934:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000936:	2b00      	cmp	r3, #0
 8000938:	d1df      	bne.n	80008fa <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 800093a:	f7ff fe29 	bl	8000590 <HAL_GetTick>
 800093e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000940:	682b      	ldr	r3, [r5, #0]
 8000942:	039f      	lsls	r7, r3, #14
 8000944:	d5a9      	bpl.n	800089a <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000946:	f7ff fe23 	bl	8000590 <HAL_GetTick>
 800094a:	1b80      	subs	r0, r0, r6
 800094c:	2864      	cmp	r0, #100	; 0x64
 800094e:	d9f7      	bls.n	8000940 <HAL_RCC_OscConfig+0xbc>
 8000950:	e7df      	b.n	8000912 <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000952:	4b81      	ldr	r3, [pc, #516]	; (8000b58 <HAL_RCC_OscConfig+0x2d4>)
 8000954:	689a      	ldr	r2, [r3, #8]
 8000956:	f012 0f0c 	tst.w	r2, #12
 800095a:	d007      	beq.n	800096c <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800095c:	689a      	ldr	r2, [r3, #8]
 800095e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000962:	2a08      	cmp	r2, #8
 8000964:	d111      	bne.n	800098a <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000966:	685b      	ldr	r3, [r3, #4]
 8000968:	025e      	lsls	r6, r3, #9
 800096a:	d40e      	bmi.n	800098a <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800096c:	4b7a      	ldr	r3, [pc, #488]	; (8000b58 <HAL_RCC_OscConfig+0x2d4>)
 800096e:	681a      	ldr	r2, [r3, #0]
 8000970:	0795      	lsls	r5, r2, #30
 8000972:	d502      	bpl.n	800097a <HAL_RCC_OscConfig+0xf6>
 8000974:	68e2      	ldr	r2, [r4, #12]
 8000976:	2a01      	cmp	r2, #1
 8000978:	d188      	bne.n	800088c <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800097a:	681a      	ldr	r2, [r3, #0]
 800097c:	6921      	ldr	r1, [r4, #16]
 800097e:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000982:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8000986:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000988:	e78a      	b.n	80008a0 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800098a:	68e2      	ldr	r2, [r4, #12]
 800098c:	4b73      	ldr	r3, [pc, #460]	; (8000b5c <HAL_RCC_OscConfig+0x2d8>)
 800098e:	b1b2      	cbz	r2, 80009be <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8000990:	2201      	movs	r2, #1
 8000992:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000994:	f7ff fdfc 	bl	8000590 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000998:	4d6f      	ldr	r5, [pc, #444]	; (8000b58 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 800099a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800099c:	682b      	ldr	r3, [r5, #0]
 800099e:	0798      	lsls	r0, r3, #30
 80009a0:	d507      	bpl.n	80009b2 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009a2:	682b      	ldr	r3, [r5, #0]
 80009a4:	6922      	ldr	r2, [r4, #16]
 80009a6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80009aa:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80009ae:	602b      	str	r3, [r5, #0]
 80009b0:	e776      	b.n	80008a0 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80009b2:	f7ff fded 	bl	8000590 <HAL_GetTick>
 80009b6:	1b80      	subs	r0, r0, r6
 80009b8:	2802      	cmp	r0, #2
 80009ba:	d9ef      	bls.n	800099c <HAL_RCC_OscConfig+0x118>
 80009bc:	e7a9      	b.n	8000912 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 80009be:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80009c0:	f7ff fde6 	bl	8000590 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80009c4:	4d64      	ldr	r5, [pc, #400]	; (8000b58 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80009c6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80009c8:	682b      	ldr	r3, [r5, #0]
 80009ca:	0799      	lsls	r1, r3, #30
 80009cc:	f57f af68 	bpl.w	80008a0 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80009d0:	f7ff fdde 	bl	8000590 <HAL_GetTick>
 80009d4:	1b80      	subs	r0, r0, r6
 80009d6:	2802      	cmp	r0, #2
 80009d8:	d9f6      	bls.n	80009c8 <HAL_RCC_OscConfig+0x144>
 80009da:	e79a      	b.n	8000912 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80009dc:	6962      	ldr	r2, [r4, #20]
 80009de:	4b60      	ldr	r3, [pc, #384]	; (8000b60 <HAL_RCC_OscConfig+0x2dc>)
 80009e0:	b17a      	cbz	r2, 8000a02 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 80009e2:	2201      	movs	r2, #1
 80009e4:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80009e6:	f7ff fdd3 	bl	8000590 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009ea:	4d5b      	ldr	r5, [pc, #364]	; (8000b58 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80009ec:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009ee:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80009f0:	079f      	lsls	r7, r3, #30
 80009f2:	f53f af59 	bmi.w	80008a8 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80009f6:	f7ff fdcb 	bl	8000590 <HAL_GetTick>
 80009fa:	1b80      	subs	r0, r0, r6
 80009fc:	2802      	cmp	r0, #2
 80009fe:	d9f6      	bls.n	80009ee <HAL_RCC_OscConfig+0x16a>
 8000a00:	e787      	b.n	8000912 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8000a02:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000a04:	f7ff fdc4 	bl	8000590 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a08:	4d53      	ldr	r5, [pc, #332]	; (8000b58 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000a0a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a0c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000a0e:	0798      	lsls	r0, r3, #30
 8000a10:	f57f af4a 	bpl.w	80008a8 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a14:	f7ff fdbc 	bl	8000590 <HAL_GetTick>
 8000a18:	1b80      	subs	r0, r0, r6
 8000a1a:	2802      	cmp	r0, #2
 8000a1c:	d9f6      	bls.n	8000a0c <HAL_RCC_OscConfig+0x188>
 8000a1e:	e778      	b.n	8000912 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a20:	4b4d      	ldr	r3, [pc, #308]	; (8000b58 <HAL_RCC_OscConfig+0x2d4>)
 8000a22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a24:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8000a28:	d128      	bne.n	8000a7c <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000a2a:	9201      	str	r2, [sp, #4]
 8000a2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a2e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000a32:	641a      	str	r2, [r3, #64]	; 0x40
 8000a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a3a:	9301      	str	r3, [sp, #4]
 8000a3c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000a3e:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a40:	4d48      	ldr	r5, [pc, #288]	; (8000b64 <HAL_RCC_OscConfig+0x2e0>)
 8000a42:	682b      	ldr	r3, [r5, #0]
 8000a44:	05d9      	lsls	r1, r3, #23
 8000a46:	d51b      	bpl.n	8000a80 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a48:	68a3      	ldr	r3, [r4, #8]
 8000a4a:	4d43      	ldr	r5, [pc, #268]	; (8000b58 <HAL_RCC_OscConfig+0x2d4>)
 8000a4c:	2b01      	cmp	r3, #1
 8000a4e:	d127      	bne.n	8000aa0 <HAL_RCC_OscConfig+0x21c>
 8000a50:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000a52:	f043 0301 	orr.w	r3, r3, #1
 8000a56:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000a58:	f7ff fd9a 	bl	8000590 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a5c:	4d3e      	ldr	r5, [pc, #248]	; (8000b58 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000a5e:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a60:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a64:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000a66:	079b      	lsls	r3, r3, #30
 8000a68:	d539      	bpl.n	8000ade <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8000a6a:	2e00      	cmp	r6, #0
 8000a6c:	f43f af20 	beq.w	80008b0 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000a70:	4a39      	ldr	r2, [pc, #228]	; (8000b58 <HAL_RCC_OscConfig+0x2d4>)
 8000a72:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000a74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000a78:	6413      	str	r3, [r2, #64]	; 0x40
 8000a7a:	e719      	b.n	80008b0 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8000a7c:	2600      	movs	r6, #0
 8000a7e:	e7df      	b.n	8000a40 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000a80:	682b      	ldr	r3, [r5, #0]
 8000a82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a86:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000a88:	f7ff fd82 	bl	8000590 <HAL_GetTick>
 8000a8c:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a8e:	682b      	ldr	r3, [r5, #0]
 8000a90:	05da      	lsls	r2, r3, #23
 8000a92:	d4d9      	bmi.n	8000a48 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000a94:	f7ff fd7c 	bl	8000590 <HAL_GetTick>
 8000a98:	1bc0      	subs	r0, r0, r7
 8000a9a:	2802      	cmp	r0, #2
 8000a9c:	d9f7      	bls.n	8000a8e <HAL_RCC_OscConfig+0x20a>
 8000a9e:	e738      	b.n	8000912 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000aa0:	2b05      	cmp	r3, #5
 8000aa2:	d104      	bne.n	8000aae <HAL_RCC_OscConfig+0x22a>
 8000aa4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000aa6:	f043 0304 	orr.w	r3, r3, #4
 8000aaa:	672b      	str	r3, [r5, #112]	; 0x70
 8000aac:	e7d0      	b.n	8000a50 <HAL_RCC_OscConfig+0x1cc>
 8000aae:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000ab0:	f022 0201 	bic.w	r2, r2, #1
 8000ab4:	672a      	str	r2, [r5, #112]	; 0x70
 8000ab6:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000ab8:	f022 0204 	bic.w	r2, r2, #4
 8000abc:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d1ca      	bne.n	8000a58 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8000ac2:	f7ff fd65 	bl	8000590 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ac6:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000aca:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000acc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000ace:	0798      	lsls	r0, r3, #30
 8000ad0:	d5cb      	bpl.n	8000a6a <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ad2:	f7ff fd5d 	bl	8000590 <HAL_GetTick>
 8000ad6:	1bc0      	subs	r0, r0, r7
 8000ad8:	4540      	cmp	r0, r8
 8000ada:	d9f7      	bls.n	8000acc <HAL_RCC_OscConfig+0x248>
 8000adc:	e719      	b.n	8000912 <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ade:	f7ff fd57 	bl	8000590 <HAL_GetTick>
 8000ae2:	1bc0      	subs	r0, r0, r7
 8000ae4:	4540      	cmp	r0, r8
 8000ae6:	d9bd      	bls.n	8000a64 <HAL_RCC_OscConfig+0x1e0>
 8000ae8:	e713      	b.n	8000912 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000aea:	4d1b      	ldr	r5, [pc, #108]	; (8000b58 <HAL_RCC_OscConfig+0x2d4>)
 8000aec:	68ab      	ldr	r3, [r5, #8]
 8000aee:	f003 030c 	and.w	r3, r3, #12
 8000af2:	2b08      	cmp	r3, #8
 8000af4:	f43f aeca 	beq.w	800088c <HAL_RCC_OscConfig+0x8>
 8000af8:	4e1b      	ldr	r6, [pc, #108]	; (8000b68 <HAL_RCC_OscConfig+0x2e4>)
 8000afa:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000afc:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000afe:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b00:	d134      	bne.n	8000b6c <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8000b02:	f7ff fd45 	bl	8000590 <HAL_GetTick>
 8000b06:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000b08:	682b      	ldr	r3, [r5, #0]
 8000b0a:	0199      	lsls	r1, r3, #6
 8000b0c:	d41e      	bmi.n	8000b4c <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000b0e:	6a22      	ldr	r2, [r4, #32]
 8000b10:	69e3      	ldr	r3, [r4, #28]
 8000b12:	4313      	orrs	r3, r2
 8000b14:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000b16:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000b1a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000b1c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000b20:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000b22:	4c0d      	ldr	r4, [pc, #52]	; (8000b58 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000b24:	0852      	lsrs	r2, r2, #1
 8000b26:	3a01      	subs	r2, #1
 8000b28:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b2c:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000b2e:	2301      	movs	r3, #1
 8000b30:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000b32:	f7ff fd2d 	bl	8000590 <HAL_GetTick>
 8000b36:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000b38:	6823      	ldr	r3, [r4, #0]
 8000b3a:	019a      	lsls	r2, r3, #6
 8000b3c:	f53f aebc 	bmi.w	80008b8 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b40:	f7ff fd26 	bl	8000590 <HAL_GetTick>
 8000b44:	1b40      	subs	r0, r0, r5
 8000b46:	2802      	cmp	r0, #2
 8000b48:	d9f6      	bls.n	8000b38 <HAL_RCC_OscConfig+0x2b4>
 8000b4a:	e6e2      	b.n	8000912 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b4c:	f7ff fd20 	bl	8000590 <HAL_GetTick>
 8000b50:	1bc0      	subs	r0, r0, r7
 8000b52:	2802      	cmp	r0, #2
 8000b54:	d9d8      	bls.n	8000b08 <HAL_RCC_OscConfig+0x284>
 8000b56:	e6dc      	b.n	8000912 <HAL_RCC_OscConfig+0x8e>
 8000b58:	40023800 	.word	0x40023800
 8000b5c:	42470000 	.word	0x42470000
 8000b60:	42470e80 	.word	0x42470e80
 8000b64:	40007000 	.word	0x40007000
 8000b68:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8000b6c:	f7ff fd10 	bl	8000590 <HAL_GetTick>
 8000b70:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000b72:	682b      	ldr	r3, [r5, #0]
 8000b74:	019b      	lsls	r3, r3, #6
 8000b76:	f57f ae9f 	bpl.w	80008b8 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b7a:	f7ff fd09 	bl	8000590 <HAL_GetTick>
 8000b7e:	1b00      	subs	r0, r0, r4
 8000b80:	2802      	cmp	r0, #2
 8000b82:	d9f6      	bls.n	8000b72 <HAL_RCC_OscConfig+0x2ee>
 8000b84:	e6c5      	b.n	8000912 <HAL_RCC_OscConfig+0x8e>
 8000b86:	bf00      	nop

08000b88 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000b88:	4913      	ldr	r1, [pc, #76]	; (8000bd8 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000b8a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000b8c:	688b      	ldr	r3, [r1, #8]
 8000b8e:	f003 030c 	and.w	r3, r3, #12
 8000b92:	2b04      	cmp	r3, #4
 8000b94:	d003      	beq.n	8000b9e <HAL_RCC_GetSysClockFreq+0x16>
 8000b96:	2b08      	cmp	r3, #8
 8000b98:	d003      	beq.n	8000ba2 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000b9a:	4810      	ldr	r0, [pc, #64]	; (8000bdc <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000b9c:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8000b9e:	4810      	ldr	r0, [pc, #64]	; (8000be0 <HAL_RCC_GetSysClockFreq+0x58>)
 8000ba0:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000ba2:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000ba4:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000ba6:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000ba8:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000bac:	bf14      	ite	ne
 8000bae:	480c      	ldrne	r0, [pc, #48]	; (8000be0 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000bb0:	480a      	ldreq	r0, [pc, #40]	; (8000bdc <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000bb2:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000bb6:	bf18      	it	ne
 8000bb8:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000bba:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000bbe:	fba1 0100 	umull	r0, r1, r1, r0
 8000bc2:	f7ff fb13 	bl	80001ec <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000bc6:	4b04      	ldr	r3, [pc, #16]	; (8000bd8 <HAL_RCC_GetSysClockFreq+0x50>)
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000bce:	3301      	adds	r3, #1
 8000bd0:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8000bd2:	fbb0 f0f3 	udiv	r0, r0, r3
 8000bd6:	bd08      	pop	{r3, pc}
 8000bd8:	40023800 	.word	0x40023800
 8000bdc:	00f42400 	.word	0x00f42400
 8000be0:	007a1200 	.word	0x007a1200

08000be4 <HAL_RCC_ClockConfig>:
{
 8000be4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000be8:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000bea:	4604      	mov	r4, r0
 8000bec:	b910      	cbnz	r0, 8000bf4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000bee:	2001      	movs	r0, #1
 8000bf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000bf4:	4b44      	ldr	r3, [pc, #272]	; (8000d08 <HAL_RCC_ClockConfig+0x124>)
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	f002 020f 	and.w	r2, r2, #15
 8000bfc:	428a      	cmp	r2, r1
 8000bfe:	d328      	bcc.n	8000c52 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000c00:	6821      	ldr	r1, [r4, #0]
 8000c02:	078f      	lsls	r7, r1, #30
 8000c04:	d42d      	bmi.n	8000c62 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000c06:	07c8      	lsls	r0, r1, #31
 8000c08:	d440      	bmi.n	8000c8c <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000c0a:	4b3f      	ldr	r3, [pc, #252]	; (8000d08 <HAL_RCC_ClockConfig+0x124>)
 8000c0c:	681a      	ldr	r2, [r3, #0]
 8000c0e:	f002 020f 	and.w	r2, r2, #15
 8000c12:	4295      	cmp	r5, r2
 8000c14:	d366      	bcc.n	8000ce4 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c16:	6822      	ldr	r2, [r4, #0]
 8000c18:	0751      	lsls	r1, r2, #29
 8000c1a:	d46c      	bmi.n	8000cf6 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c1c:	0713      	lsls	r3, r2, #28
 8000c1e:	d507      	bpl.n	8000c30 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000c20:	4a3a      	ldr	r2, [pc, #232]	; (8000d0c <HAL_RCC_ClockConfig+0x128>)
 8000c22:	6921      	ldr	r1, [r4, #16]
 8000c24:	6893      	ldr	r3, [r2, #8]
 8000c26:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000c2a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000c2e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000c30:	f7ff ffaa 	bl	8000b88 <HAL_RCC_GetSysClockFreq>
 8000c34:	4b35      	ldr	r3, [pc, #212]	; (8000d0c <HAL_RCC_ClockConfig+0x128>)
 8000c36:	4a36      	ldr	r2, [pc, #216]	; (8000d10 <HAL_RCC_ClockConfig+0x12c>)
 8000c38:	689b      	ldr	r3, [r3, #8]
 8000c3a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000c3e:	5cd3      	ldrb	r3, [r2, r3]
 8000c40:	40d8      	lsrs	r0, r3
 8000c42:	4b34      	ldr	r3, [pc, #208]	; (8000d14 <HAL_RCC_ClockConfig+0x130>)
 8000c44:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000c46:	2000      	movs	r0, #0
 8000c48:	f7ff fc58 	bl	80004fc <HAL_InitTick>
  return HAL_OK;
 8000c4c:	2000      	movs	r0, #0
 8000c4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c52:	b2ca      	uxtb	r2, r1
 8000c54:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	f003 030f 	and.w	r3, r3, #15
 8000c5c:	4299      	cmp	r1, r3
 8000c5e:	d1c6      	bne.n	8000bee <HAL_RCC_ClockConfig+0xa>
 8000c60:	e7ce      	b.n	8000c00 <HAL_RCC_ClockConfig+0x1c>
 8000c62:	4b2a      	ldr	r3, [pc, #168]	; (8000d0c <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c64:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000c68:	bf1e      	ittt	ne
 8000c6a:	689a      	ldrne	r2, [r3, #8]
 8000c6c:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8000c70:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c72:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000c74:	bf42      	ittt	mi
 8000c76:	689a      	ldrmi	r2, [r3, #8]
 8000c78:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8000c7c:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000c7e:	689a      	ldr	r2, [r3, #8]
 8000c80:	68a0      	ldr	r0, [r4, #8]
 8000c82:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000c86:	4302      	orrs	r2, r0
 8000c88:	609a      	str	r2, [r3, #8]
 8000c8a:	e7bc      	b.n	8000c06 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c8c:	6862      	ldr	r2, [r4, #4]
 8000c8e:	4b1f      	ldr	r3, [pc, #124]	; (8000d0c <HAL_RCC_ClockConfig+0x128>)
 8000c90:	2a01      	cmp	r2, #1
 8000c92:	d11d      	bne.n	8000cd0 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c9a:	d0a8      	beq.n	8000bee <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000c9c:	4e1b      	ldr	r6, [pc, #108]	; (8000d0c <HAL_RCC_ClockConfig+0x128>)
 8000c9e:	68b3      	ldr	r3, [r6, #8]
 8000ca0:	f023 0303 	bic.w	r3, r3, #3
 8000ca4:	4313      	orrs	r3, r2
 8000ca6:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000ca8:	f7ff fc72 	bl	8000590 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000cac:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000cb0:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000cb2:	68b3      	ldr	r3, [r6, #8]
 8000cb4:	6862      	ldr	r2, [r4, #4]
 8000cb6:	f003 030c 	and.w	r3, r3, #12
 8000cba:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000cbe:	d0a4      	beq.n	8000c0a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000cc0:	f7ff fc66 	bl	8000590 <HAL_GetTick>
 8000cc4:	1bc0      	subs	r0, r0, r7
 8000cc6:	4540      	cmp	r0, r8
 8000cc8:	d9f3      	bls.n	8000cb2 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8000cca:	2003      	movs	r0, #3
}
 8000ccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000cd0:	1e91      	subs	r1, r2, #2
 8000cd2:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000cd4:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000cd6:	d802      	bhi.n	8000cde <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000cd8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000cdc:	e7dd      	b.n	8000c9a <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cde:	f013 0f02 	tst.w	r3, #2
 8000ce2:	e7da      	b.n	8000c9a <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ce4:	b2ea      	uxtb	r2, r5
 8000ce6:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f003 030f 	and.w	r3, r3, #15
 8000cee:	429d      	cmp	r5, r3
 8000cf0:	f47f af7d 	bne.w	8000bee <HAL_RCC_ClockConfig+0xa>
 8000cf4:	e78f      	b.n	8000c16 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000cf6:	4905      	ldr	r1, [pc, #20]	; (8000d0c <HAL_RCC_ClockConfig+0x128>)
 8000cf8:	68e0      	ldr	r0, [r4, #12]
 8000cfa:	688b      	ldr	r3, [r1, #8]
 8000cfc:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000d00:	4303      	orrs	r3, r0
 8000d02:	608b      	str	r3, [r1, #8]
 8000d04:	e78a      	b.n	8000c1c <HAL_RCC_ClockConfig+0x38>
 8000d06:	bf00      	nop
 8000d08:	40023c00 	.word	0x40023c00
 8000d0c:	40023800 	.word	0x40023800
 8000d10:	0800172d 	.word	0x0800172d
 8000d14:	2001e854 	.word	0x2001e854

08000d18 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8000d18:	4b01      	ldr	r3, [pc, #4]	; (8000d20 <HAL_RCC_GetHCLKFreq+0x8>)
 8000d1a:	6818      	ldr	r0, [r3, #0]
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	2001e854 	.word	0x2001e854

08000d24 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8000d24:	b570      	push	{r4, r5, r6, lr}
 8000d26:	460e      	mov	r6, r1
 8000d28:	4615      	mov	r5, r2
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	b310      	cbz	r0, 8000d74 <HAL_SRAM_Init+0x50>
  {
     return HAL_ERROR;
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8000d2e:	f890 3049 	ldrb.w	r3, [r0, #73]	; 0x49
 8000d32:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000d36:	b91b      	cbnz	r3, 8000d40 <HAL_SRAM_Init+0x1c>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8000d38:	f880 2048 	strb.w	r2, [r0, #72]	; 0x48
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8000d3c:	f000 f9aa 	bl	8001094 <HAL_SRAM_MspInit>
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8000d40:	f104 0108 	add.w	r1, r4, #8
 8000d44:	6820      	ldr	r0, [r4, #0]
 8000d46:	f000 f817 	bl	8000d78 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8000d4a:	68a2      	ldr	r2, [r4, #8]
 8000d4c:	6820      	ldr	r0, [r4, #0]
 8000d4e:	4631      	mov	r1, r6
 8000d50:	f000 f848 	bl	8000de4 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8000d54:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000d56:	68a2      	ldr	r2, [r4, #8]
 8000d58:	6860      	ldr	r0, [r4, #4]
 8000d5a:	4629      	mov	r1, r5
 8000d5c:	f000 f868 	bl	8000e30 <FMC_NORSRAM_Extended_Timing_Init>
 8000d60:	68a1      	ldr	r1, [r4, #8]
 8000d62:	6822      	ldr	r2, [r4, #0]
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8000d64:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8000d68:	f043 0301 	orr.w	r3, r3, #1
 8000d6c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  
  return HAL_OK;
 8000d70:	2000      	movs	r0, #0
 8000d72:	bd70      	pop	{r4, r5, r6, pc}
     return HAL_ERROR;
 8000d74:	2001      	movs	r0, #1
}
 8000d76:	bd70      	pop	{r4, r5, r6, pc}

08000d78 <FMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device, FMC_NORSRAM_InitTypeDef* Init)
{ 
 8000d78:	b5f0      	push	{r4, r5, r6, r7, lr}
#if defined (STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */

  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8000d7a:	680c      	ldr	r4, [r1, #0]
                       FMC_BCR1_ASYNCWAIT | FMC_BCR1_CPSIZE   | FMC_BCR1_CBURSTRW | \
                       FMC_BCR1_CCLKEN));
  
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
                    Init->MemoryType           |\
 8000d7c:	688e      	ldr	r6, [r1, #8]
  tmpr = Device->BTCR[Init->NSBank];
 8000d7e:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8000d82:	684a      	ldr	r2, [r1, #4]
  tmpr &= ((uint32_t)~(FMC_BCR1_MBKEN     | FMC_BCR1_MUXEN    | FMC_BCR1_MTYP     | \
 8000d84:	4f16      	ldr	r7, [pc, #88]	; (8000de0 <FMC_NORSRAM_Init+0x68>)
                    Init->WaitSignal           |\
                    Init->ExtendedMode         |\
                    Init->AsynchronousWait     |\
                    Init->PageSize             |\
                    Init->WriteBurst           |\
                    Init->ContinuousClock);
 8000d86:	6b4d      	ldr	r5, [r1, #52]	; 0x34
  tmpr &= ((uint32_t)~(FMC_BCR1_MBKEN     | FMC_BCR1_MUXEN    | FMC_BCR1_MTYP     | \
 8000d88:	401f      	ands	r7, r3
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8000d8a:	ea46 0302 	orr.w	r3, r6, r2
                    Init->MemoryType           |\
 8000d8e:	68ca      	ldr	r2, [r1, #12]
 8000d90:	4313      	orrs	r3, r2
                    Init->MemoryDataWidth      |\
 8000d92:	690a      	ldr	r2, [r1, #16]
 8000d94:	4313      	orrs	r3, r2
                    Init->BurstAccessMode      |\
 8000d96:	694a      	ldr	r2, [r1, #20]
 8000d98:	4313      	orrs	r3, r2
                    Init->WaitSignalPolarity   |\
 8000d9a:	698a      	ldr	r2, [r1, #24]
 8000d9c:	4313      	orrs	r3, r2
                    Init->WrapMode             |\
 8000d9e:	69ca      	ldr	r2, [r1, #28]
 8000da0:	4313      	orrs	r3, r2
                    Init->WaitSignalActive     |\
 8000da2:	6a0a      	ldr	r2, [r1, #32]
 8000da4:	4313      	orrs	r3, r2
                    Init->WriteOperation       |\
 8000da6:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8000da8:	4313      	orrs	r3, r2
                    Init->WaitSignal           |\
 8000daa:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8000dac:	4313      	orrs	r3, r2
                    Init->ExtendedMode         |\
 8000dae:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8000db0:	4313      	orrs	r3, r2
                    Init->AsynchronousWait     |\
 8000db2:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 8000db4:	4313      	orrs	r3, r2
                    Init->PageSize             |\
 8000db6:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8000db8:	4313      	orrs	r3, r2
                    Init->WriteBurst           |\
 8000dba:	432b      	orrs	r3, r5
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8000dbc:	433b      	orrs	r3, r7
                    Init->ContinuousClock      |\
                    Init->PageSize             |\
                    Init->WriteFifo);
#endif /*  defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) */
                    
  if(Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 8000dbe:	2e08      	cmp	r6, #8
  {
    tmpr |= (uint32_t)FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8000dc0:	bf08      	it	eq
 8000dc2:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
  }
  
  Device->BTCR[Init->NSBank] = tmpr;

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8000dc6:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
  Device->BTCR[Init->NSBank] = tmpr;
 8000dca:	f840 3024 	str.w	r3, [r0, r4, lsl #2]
  if((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8000dce:	d104      	bne.n	8000dda <FMC_NORSRAM_Init+0x62>
 8000dd0:	b11c      	cbz	r4, 8000dda <FMC_NORSRAM_Init+0x62>
  { 
    Device->BTCR[FMC_NORSRAM_BANK1] |= (uint32_t)(Init->ContinuousClock);
 8000dd2:	6803      	ldr	r3, [r0, #0]
 8000dd4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000dd8:	6003      	str	r3, [r0, #0]
    Device->BTCR[FMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);              
  }
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
  
  return HAL_OK;
}
 8000dda:	2000      	movs	r0, #0
 8000ddc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000dde:	bf00      	nop
 8000de0:	ffe00080 	.word	0xffe00080

08000de4 <FMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device, FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8000de4:	b570      	push	{r4, r5, r6, lr}
  tmpr &= ((uint32_t)~(FMC_BTR1_ADDSET  | FMC_BTR1_ADDHLD | FMC_BTR1_DATAST | \
                       FMC_BTR1_BUSTURN | FMC_BTR1_CLKDIV | FMC_BTR1_DATLAT | \
                       FMC_BTR1_ACCMOD));
  
  /* Set FMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                   |\
 8000de6:	680b      	ldr	r3, [r1, #0]
 8000de8:	698e      	ldr	r6, [r1, #24]
                    ((Timing->AddressHoldTime) << 4U)           |\
                    ((Timing->DataSetupTime) << 8U)             |\
                    ((Timing->BusTurnAroundDuration) << 16U)    |\
                    (((Timing->CLKDivision) - 1U) << 20U)         |\
 8000dea:	690c      	ldr	r4, [r1, #16]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                   |\
 8000dec:	4333      	orrs	r3, r6
                    ((Timing->AddressHoldTime) << 4U)           |\
 8000dee:	684e      	ldr	r6, [r1, #4]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                   |\
 8000df0:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
                    ((Timing->DataSetupTime) << 8U)             |\
 8000df4:	688e      	ldr	r6, [r1, #8]
 8000df6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  tmpr |= (uint32_t)(Timing->AddressSetupTime                   |\
 8000dfa:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
                    ((Timing->BusTurnAroundDuration) << 16U)    |\
 8000dfe:	68ce      	ldr	r6, [r1, #12]
                    (((Timing->DataLatency) - 2U) << 24U)         |\
 8000e00:	6949      	ldr	r1, [r1, #20]
  tmpr = Device->BTCR[Bank + 1U];
 8000e02:	6855      	ldr	r5, [r2, #4]
                    (((Timing->CLKDivision) - 1U) << 20U)         |\
 8000e04:	3c01      	subs	r4, #1
 8000e06:	0524      	lsls	r4, r4, #20
  tmpr |= (uint32_t)(Timing->AddressSetupTime                   |\
 8000e08:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e0c:	4323      	orrs	r3, r4
                    (((Timing->DataLatency) - 2U) << 24U)         |\
 8000e0e:	3902      	subs	r1, #2
  tmpr &= ((uint32_t)~(FMC_BTR1_ADDSET  | FMC_BTR1_ADDHLD | FMC_BTR1_DATAST | \
 8000e10:	f005 4540 	and.w	r5, r5, #3221225472	; 0xc0000000
  tmpr |= (uint32_t)(Timing->AddressSetupTime                   |\
 8000e14:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8000e18:	432b      	orrs	r3, r5
                    (Timing->AccessMode));
  
  Device->BTCR[Bank + 1U] = tmpr;
 8000e1a:	6053      	str	r3, [r2, #4]
  
  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if(HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 8000e1c:	6803      	ldr	r3, [r0, #0]
 8000e1e:	02db      	lsls	r3, r3, #11
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~(0x0FU << 20U)); 
 8000e20:	bf41      	itttt	mi
 8000e22:	6843      	ldrmi	r3, [r0, #4]
 8000e24:	f423 0370 	bicmi.w	r3, r3, #15728640	; 0xf00000
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << 20U);
 8000e28:	431c      	orrmi	r4, r3
    Device->BTCR[FMC_NORSRAM_BANK1 + 1U] = tmpr;
 8000e2a:	6044      	strmi	r4, [r0, #4]
  }  
  
  return HAL_OK;   
}
 8000e2c:	2000      	movs	r0, #0
 8000e2e:	bd70      	pop	{r4, r5, r6, pc}

08000e30 <FMC_NORSRAM_Extended_Timing_Init>:
 
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));
  
  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 8000e30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
{  
 8000e34:	b530      	push	{r4, r5, lr}
  if(ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 8000e36:	d114      	bne.n	8000e62 <FMC_NORSRAM_Extended_Timing_Init+0x32>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));  
    
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8000e38:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]

    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FMC_BWTR1_ADDSET  | FMC_BWTR1_ADDHLD | FMC_BWTR1_DATAST | \
 8000e3c:	4c0a      	ldr	r4, [pc, #40]	; (8000e68 <FMC_NORSRAM_Extended_Timing_Init+0x38>)
                         FMC_BWTR1_BUSTURN | FMC_BWTR1_ACCMOD));
    
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
                      ((Timing->AddressHoldTime) << 4U)          |\
                      ((Timing->DataSetupTime) << 8U)            |\
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8000e3e:	698d      	ldr	r5, [r1, #24]
    tmpr &= ((uint32_t)~(FMC_BWTR1_ADDSET  | FMC_BWTR1_ADDHLD | FMC_BWTR1_DATAST | \
 8000e40:	401c      	ands	r4, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8000e42:	680b      	ldr	r3, [r1, #0]
 8000e44:	432b      	orrs	r3, r5
                      ((Timing->AddressHoldTime) << 4U)          |\
 8000e46:	684d      	ldr	r5, [r1, #4]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8000e48:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
                      ((Timing->DataSetupTime) << 8U)            |\
 8000e4c:	688d      	ldr	r5, [r1, #8]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8000e4e:	68c9      	ldr	r1, [r1, #12]
 8000e50:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8000e54:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8000e58:	4323      	orrs	r3, r4

    Device->BWTR[Bank] = tmpr;
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8000e5a:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  }   
  
  return HAL_OK;  
}
 8000e5e:	2000      	movs	r0, #0
 8000e60:	bd30      	pop	{r4, r5, pc}
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8000e62:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8000e66:	e7f8      	b.n	8000e5a <FMC_NORSRAM_Extended_Timing_Init+0x2a>
 8000e68:	cff00000 	.word	0xcff00000

08000e6c <ILI9341_SetCursorPosition>:
#endif
}

//Funciones independientes de Hardware
//3. Set cursor position
void ILI9341_SetCursorPosition(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8000e6c:	b570      	push	{r4, r5, r6, lr}
	*(__IO uint8_t *)(0x60000000) = com;
 8000e6e:	f04f 45c0 	mov.w	r5, #1610612736	; 0x60000000
 8000e72:	242a      	movs	r4, #42	; 0x2a
 8000e74:	702c      	strb	r4, [r5, #0]
	*(__IO uint8_t *)(0x60080000) = data;
 8000e76:	4c0b      	ldr	r4, [pc, #44]	; (8000ea4 <ILI9341_SetCursorPosition+0x38>)

  ILI9341_SendCommand (ILI9341_COLUMN_ADDR);
  ILI9341_SendData(x1>>8);
 8000e78:	0a06      	lsrs	r6, r0, #8
  ILI9341_SendData(x1 & 0xFF);
 8000e7a:	b2c0      	uxtb	r0, r0
	*(__IO uint8_t *)(0x60080000) = data;
 8000e7c:	7026      	strb	r6, [r4, #0]
 8000e7e:	7020      	strb	r0, [r4, #0]
  ILI9341_SendData(x2>>8);
 8000e80:	0a10      	lsrs	r0, r2, #8
  ILI9341_SendData(x2 & 0xFF);
 8000e82:	b2d2      	uxtb	r2, r2
	*(__IO uint8_t *)(0x60080000) = data;
 8000e84:	7020      	strb	r0, [r4, #0]
 8000e86:	7022      	strb	r2, [r4, #0]
	*(__IO uint8_t *)(0x60000000) = com;
 8000e88:	222b      	movs	r2, #43	; 0x2b
 8000e8a:	702a      	strb	r2, [r5, #0]

  ILI9341_SendCommand (ILI9341_PAGE_ADDR);
  ILI9341_SendData(y1>>8);
 8000e8c:	0a0a      	lsrs	r2, r1, #8
	*(__IO uint8_t *)(0x60080000) = data;
 8000e8e:	7022      	strb	r2, [r4, #0]
  ILI9341_SendData(y1 & 0xFF);
 8000e90:	b2c9      	uxtb	r1, r1
  ILI9341_SendData(y2>>8);
 8000e92:	0a1a      	lsrs	r2, r3, #8
  ILI9341_SendData(y2 & 0xFF);
 8000e94:	b2db      	uxtb	r3, r3
	*(__IO uint8_t *)(0x60080000) = data;
 8000e96:	7021      	strb	r1, [r4, #0]
 8000e98:	7022      	strb	r2, [r4, #0]
 8000e9a:	7023      	strb	r3, [r4, #0]
	*(__IO uint8_t *)(0x60000000) = com;
 8000e9c:	232c      	movs	r3, #44	; 0x2c
 8000e9e:	702b      	strb	r3, [r5, #0]
 8000ea0:	bd70      	pop	{r4, r5, r6, pc}
 8000ea2:	bf00      	nop
 8000ea4:	60080000 	.word	0x60080000

08000ea8 <ILI9341_Init>:
  ILI9341_SendCommand (ILI9341_GRAM);
}
//4. Initialise function
void ILI9341_Init(void)
 {
 8000ea8:	b538      	push	{r3, r4, r5, lr}
	*(__IO uint8_t *)(0x60000000) = com;
 8000eaa:	f04f 44c0 	mov.w	r4, #1610612736	; 0x60000000
 8000eae:	2501      	movs	r5, #1
 8000eb0:	7025      	strb	r5, [r4, #0]
   ILI9341_SendCommand (ILI9341_RESET); // software reset comand
   HAL_Delay(100);
 8000eb2:	2064      	movs	r0, #100	; 0x64
 8000eb4:	f7ff fb72 	bl	800059c <HAL_Delay>
	*(__IO uint8_t *)(0x60000000) = com;
 8000eb8:	2328      	movs	r3, #40	; 0x28
 8000eba:	7023      	strb	r3, [r4, #0]
 8000ebc:	23c0      	movs	r3, #192	; 0xc0
 8000ebe:	7023      	strb	r3, [r4, #0]
	*(__IO uint8_t *)(0x60080000) = data;
 8000ec0:	4b25      	ldr	r3, [pc, #148]	; (8000f58 <ILI9341_Init+0xb0>)
 8000ec2:	2226      	movs	r2, #38	; 0x26
 8000ec4:	701a      	strb	r2, [r3, #0]
	*(__IO uint8_t *)(0x60000000) = com;
 8000ec6:	22c1      	movs	r2, #193	; 0xc1
 8000ec8:	7022      	strb	r2, [r4, #0]
	*(__IO uint8_t *)(0x60080000) = data;
 8000eca:	2111      	movs	r1, #17
	*(__IO uint8_t *)(0x60000000) = com;
 8000ecc:	22c5      	movs	r2, #197	; 0xc5
	*(__IO uint8_t *)(0x60080000) = data;
 8000ece:	7019      	strb	r1, [r3, #0]
	*(__IO uint8_t *)(0x60000000) = com;
 8000ed0:	7022      	strb	r2, [r4, #0]
	*(__IO uint8_t *)(0x60080000) = data;
 8000ed2:	2235      	movs	r2, #53	; 0x35
 8000ed4:	701a      	strb	r2, [r3, #0]
 8000ed6:	223e      	movs	r2, #62	; 0x3e
 8000ed8:	701a      	strb	r2, [r3, #0]
	*(__IO uint8_t *)(0x60000000) = com;
 8000eda:	22c7      	movs	r2, #199	; 0xc7
 8000edc:	7022      	strb	r2, [r4, #0]
	*(__IO uint8_t *)(0x60080000) = data;
 8000ede:	22be      	movs	r2, #190	; 0xbe
 8000ee0:	701a      	strb	r2, [r3, #0]
	*(__IO uint8_t *)(0x60000000) = com;
 8000ee2:	2236      	movs	r2, #54	; 0x36
 8000ee4:	7022      	strb	r2, [r4, #0]
	*(__IO uint8_t *)(0x60080000) = data;
 8000ee6:	2248      	movs	r2, #72	; 0x48
 8000ee8:	701a      	strb	r2, [r3, #0]
	*(__IO uint8_t *)(0x60000000) = com;
 8000eea:	223a      	movs	r2, #58	; 0x3a
 8000eec:	7022      	strb	r2, [r4, #0]
	*(__IO uint8_t *)(0x60080000) = data;
 8000eee:	2255      	movs	r2, #85	; 0x55
 8000ef0:	701a      	strb	r2, [r3, #0]
	*(__IO uint8_t *)(0x60000000) = com;
 8000ef2:	22b1      	movs	r2, #177	; 0xb1
 8000ef4:	7022      	strb	r2, [r4, #0]
	*(__IO uint8_t *)(0x60080000) = data;
 8000ef6:	201f      	movs	r0, #31
 8000ef8:	2200      	movs	r2, #0
 8000efa:	701a      	strb	r2, [r3, #0]
 8000efc:	7018      	strb	r0, [r3, #0]
	*(__IO uint8_t *)(0x60000000) = com;
 8000efe:	202a      	movs	r0, #42	; 0x2a
 8000f00:	7020      	strb	r0, [r4, #0]
	*(__IO uint8_t *)(0x60080000) = data;
 8000f02:	20ef      	movs	r0, #239	; 0xef
 8000f04:	701a      	strb	r2, [r3, #0]
 8000f06:	701a      	strb	r2, [r3, #0]
 8000f08:	701a      	strb	r2, [r3, #0]
 8000f0a:	7018      	strb	r0, [r3, #0]
	*(__IO uint8_t *)(0x60000000) = com;
 8000f0c:	202b      	movs	r0, #43	; 0x2b
 8000f0e:	7020      	strb	r0, [r4, #0]
	*(__IO uint8_t *)(0x60080000) = data;
 8000f10:	203f      	movs	r0, #63	; 0x3f
 8000f12:	701a      	strb	r2, [r3, #0]
 8000f14:	701a      	strb	r2, [r3, #0]
 8000f16:	701d      	strb	r5, [r3, #0]
 8000f18:	7018      	strb	r0, [r3, #0]
	*(__IO uint8_t *)(0x60000000) = com;
 8000f1a:	2034      	movs	r0, #52	; 0x34
 8000f1c:	7020      	strb	r0, [r4, #0]
 8000f1e:	20b7      	movs	r0, #183	; 0xb7
 8000f20:	7020      	strb	r0, [r4, #0]
	*(__IO uint8_t *)(0x60080000) = data;
 8000f22:	2007      	movs	r0, #7
 8000f24:	7018      	strb	r0, [r3, #0]
	*(__IO uint8_t *)(0x60000000) = com;
 8000f26:	20b6      	movs	r0, #182	; 0xb6
 8000f28:	7020      	strb	r0, [r4, #0]
	*(__IO uint8_t *)(0x60080000) = data;
 8000f2a:	200a      	movs	r0, #10
 8000f2c:	7018      	strb	r0, [r3, #0]
 8000f2e:	2082      	movs	r0, #130	; 0x82
 8000f30:	7018      	strb	r0, [r3, #0]
 8000f32:	2027      	movs	r0, #39	; 0x27
 8000f34:	7018      	strb	r0, [r3, #0]
 8000f36:	701a      	strb	r2, [r3, #0]
   // Sets the number of lines to drive the LCD at an interval of 8 lines
   ILI9341_SendData   (0x27);
   ILI9341_SendData   (0x00); // clock divisor

   ILI9341_SendCommand (ILI9341_SLEEP_OUT); // sleep out
   HAL_Delay(100);
 8000f38:	2064      	movs	r0, #100	; 0x64
	*(__IO uint8_t *)(0x60000000) = com;
 8000f3a:	7021      	strb	r1, [r4, #0]
   HAL_Delay(100);
 8000f3c:	f7ff fb2e 	bl	800059c <HAL_Delay>
	*(__IO uint8_t *)(0x60000000) = com;
 8000f40:	2329      	movs	r3, #41	; 0x29
 8000f42:	7023      	strb	r3, [r4, #0]
   ILI9341_SendCommand (ILI9341_DISPLAY_ON); // display on
   HAL_Delay(100);
 8000f44:	2064      	movs	r0, #100	; 0x64
 8000f46:	f7ff fb29 	bl	800059c <HAL_Delay>
	*(__IO uint8_t *)(0x60000000) = com;
 8000f4a:	232c      	movs	r3, #44	; 0x2c
 8000f4c:	7023      	strb	r3, [r4, #0]
   ILI9341_SendCommand (ILI9341_GRAM); // memory write
   HAL_Delay(5);
 8000f4e:	2005      	movs	r0, #5
 }
 8000f50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   HAL_Delay(5);
 8000f54:	f7ff bb22 	b.w	800059c <HAL_Delay>
 8000f58:	60080000 	.word	0x60080000

08000f5c <ILI9341_Fill>:
  ILI9341_SetCursorPosition(x, y, x, y);
	ILI9341_SendData(color>>8);
	ILI9341_SendData(color&0xFF);
}
//6. Fill the entire screen with a background color
void ILI9341_Fill(uint16_t color) {
 8000f5c:	b510      	push	{r4, lr}
	uint32_t n = ILI9341_PIXEL_COUNT;

	if(rotationNum==1 || rotationNum==3)
 8000f5e:	4b10      	ldr	r3, [pc, #64]	; (8000fa0 <ILI9341_Fill+0x44>)
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 8000f66:	2a01      	cmp	r2, #1
void ILI9341_Fill(uint16_t color) {
 8000f68:	4604      	mov	r4, r0
	if(rotationNum==1 || rotationNum==3)
 8000f6a:	d110      	bne.n	8000f8e <ILI9341_Fill+0x32>
	{
		ILI9341_SetCursorPosition(0, 0,   ILI9341_WIDTH -1, ILI9341_HEIGHT -1);
 8000f6c:	f240 13df 	movw	r3, #479	; 0x1df
 8000f70:	f240 123f 	movw	r2, #319	; 0x13f
	}
	else if(rotationNum==2 || rotationNum==4)
	{
		ILI9341_SetCursorPosition(0, 0, ILI9341_HEIGHT -1, ILI9341_WIDTH -1);
 8000f74:	2100      	movs	r1, #0
 8000f76:	4608      	mov	r0, r1
 8000f78:	f7ff ff78 	bl	8000e6c <ILI9341_SetCursorPosition>
	*(__IO uint8_t *)(0x60080000) = data;
 8000f7c:	4a09      	ldr	r2, [pc, #36]	; (8000fa4 <ILI9341_Fill+0x48>)
	}

	while (n) {
			n--;
       ILI9341_SendData(color>>8);
 8000f7e:	0a21      	lsrs	r1, r4, #8
 8000f80:	f44f 3316 	mov.w	r3, #153600	; 0x25800
	while (n) {
 8000f84:	3b01      	subs	r3, #1
	*(__IO uint8_t *)(0x60080000) = data;
 8000f86:	7011      	strb	r1, [r2, #0]
 8000f88:	7014      	strb	r4, [r2, #0]
	while (n) {
 8000f8a:	d1fb      	bne.n	8000f84 <ILI9341_Fill+0x28>
				ILI9341_SendData(color&0xff);
	}
}
 8000f8c:	bd10      	pop	{r4, pc}
	else if(rotationNum==2 || rotationNum==4)
 8000f8e:	2b02      	cmp	r3, #2
 8000f90:	d001      	beq.n	8000f96 <ILI9341_Fill+0x3a>
 8000f92:	2b04      	cmp	r3, #4
 8000f94:	d1f2      	bne.n	8000f7c <ILI9341_Fill+0x20>
		ILI9341_SetCursorPosition(0, 0, ILI9341_HEIGHT -1, ILI9341_WIDTH -1);
 8000f96:	f240 133f 	movw	r3, #319	; 0x13f
 8000f9a:	f240 12df 	movw	r2, #479	; 0x1df
 8000f9e:	e7e9      	b.n	8000f74 <ILI9341_Fill+0x18>
 8000fa0:	20000008 	.word	0x20000008
 8000fa4:	60080000 	.word	0x60080000

08000fa8 <ILI9341_printImage>:
	}
}

//12. Image print (RGB 565, 2 bytes per pixel)
void ILI9341_printImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint8_t *data, uint32_t size)
{
 8000fa8:	b510      	push	{r4, lr}
	uint32_t n = size;
	ILI9341_SetCursorPosition(x, y, w+x-1, h+y-1);
 8000faa:	1e4c      	subs	r4, r1, #1
 8000fac:	4423      	add	r3, r4
 8000fae:	1e44      	subs	r4, r0, #1
 8000fb0:	4422      	add	r2, r4
 8000fb2:	b29b      	uxth	r3, r3
 8000fb4:	b292      	uxth	r2, r2
 8000fb6:	f7ff ff59 	bl	8000e6c <ILI9341_SetCursorPosition>
 8000fba:	9b02      	ldr	r3, [sp, #8]
 8000fbc:	9a03      	ldr	r2, [sp, #12]
	*(__IO uint8_t *)(0x60080000) = data;
 8000fbe:	4904      	ldr	r1, [pc, #16]	; (8000fd0 <ILI9341_printImage+0x28>)
 8000fc0:	441a      	add	r2, r3
	for(uint32_t i=0; i<n ; i++)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d100      	bne.n	8000fc8 <ILI9341_printImage+0x20>
	{
		ILI9341_SendData(data[i]);
	}
}
 8000fc6:	bd10      	pop	{r4, pc}
		ILI9341_SendData(data[i]);
 8000fc8:	f813 0b01 	ldrb.w	r0, [r3], #1
	*(__IO uint8_t *)(0x60080000) = data;
 8000fcc:	7008      	strb	r0, [r1, #0]
 8000fce:	e7f8      	b.n	8000fc2 <ILI9341_printImage+0x1a>
 8000fd0:	60080000 	.word	0x60080000

08000fd4 <ILI9341_setRotation>:

//13. Set screen rotation
void ILI9341_setRotation(uint8_t rotate)
{
	switch(rotate)
 8000fd4:	3801      	subs	r0, #1
{
 8000fd6:	b500      	push	{lr}
 8000fd8:	4911      	ldr	r1, [pc, #68]	; (8001020 <ILI9341_setRotation+0x4c>)
 8000fda:	4b12      	ldr	r3, [pc, #72]	; (8001024 <ILI9341_setRotation+0x50>)
 8000fdc:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
	switch(rotate)
 8000fe0:	2803      	cmp	r0, #3
 8000fe2:	d817      	bhi.n	8001014 <ILI9341_setRotation+0x40>
 8000fe4:	e8df f000 	tbb	[pc, r0]
 8000fe8:	100a0216 	.word	0x100a0216
			rotationNum = 1;
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
			ILI9341_SendData(ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
			break;
		case 2:
			rotationNum = 2;
 8000fec:	2002      	movs	r0, #2
 8000fee:	7008      	strb	r0, [r1, #0]
	*(__IO uint8_t *)(0x60000000) = com;
 8000ff0:	2136      	movs	r1, #54	; 0x36
 8000ff2:	7011      	strb	r1, [r2, #0]
	*(__IO uint8_t *)(0x60080000) = data;
 8000ff4:	2228      	movs	r2, #40	; 0x28
 8000ff6:	701a      	strb	r2, [r3, #0]
 8000ff8:	f85d fb04 	ldr.w	pc, [sp], #4
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
			ILI9341_SendData(ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
			break;
		case 3:
			rotationNum = 3;
 8000ffc:	2003      	movs	r0, #3
 8000ffe:	7008      	strb	r0, [r1, #0]
	*(__IO uint8_t *)(0x60000000) = com;
 8001000:	2136      	movs	r1, #54	; 0x36
 8001002:	7011      	strb	r1, [r2, #0]
	*(__IO uint8_t *)(0x60080000) = data;
 8001004:	2248      	movs	r2, #72	; 0x48
 8001006:	e7f6      	b.n	8000ff6 <ILI9341_setRotation+0x22>
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
			ILI9341_SendData(ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR);
			break;
		case 4:
			rotationNum = 4;
 8001008:	2004      	movs	r0, #4
 800100a:	7008      	strb	r0, [r1, #0]
	*(__IO uint8_t *)(0x60000000) = com;
 800100c:	2136      	movs	r1, #54	; 0x36
 800100e:	7011      	strb	r1, [r2, #0]
	*(__IO uint8_t *)(0x60080000) = data;
 8001010:	22e8      	movs	r2, #232	; 0xe8
 8001012:	e7f0      	b.n	8000ff6 <ILI9341_setRotation+0x22>
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
			ILI9341_SendData(ILI9341_MADCTL_MX | ILI9341_MADCTL_MY | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
			break;
		default:
			rotationNum = 1;
 8001014:	2001      	movs	r0, #1
 8001016:	7008      	strb	r0, [r1, #0]
	*(__IO uint8_t *)(0x60000000) = com;
 8001018:	2136      	movs	r1, #54	; 0x36
 800101a:	7011      	strb	r1, [r2, #0]
	*(__IO uint8_t *)(0x60080000) = data;
 800101c:	2288      	movs	r2, #136	; 0x88
 800101e:	e7ea      	b.n	8000ff6 <ILI9341_setRotation+0x22>
 8001020:	20000008 	.word	0x20000008
 8001024:	60080000 	.word	0x60080000

08001028 <MX_FMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8001028:	b500      	push	{lr}
  FMC_NORSRAM_TimingTypeDef Timing;

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 800102a:	4818      	ldr	r0, [pc, #96]	; (800108c <MX_FMC_Init+0x64>)
 800102c:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8001030:	6003      	str	r3, [r0, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8001032:	f503 7382 	add.w	r3, r3, #260	; 0x104
{
 8001036:	b089      	sub	sp, #36	; 0x24
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8001038:	6043      	str	r3, [r0, #4]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_8;
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
  hsram1.Init.WrapMode = FMC_WRAP_MODE_DISABLE;
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 800103a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800103e:	6283      	str	r3, [r0, #40]	; 0x28
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
  /* Timing */
  Timing.AddressSetupTime = 6;
 8001040:	2306      	movs	r3, #6
  Timing.AddressHoldTime = 15;
 8001042:	210f      	movs	r1, #15
  Timing.AddressSetupTime = 6;
 8001044:	9301      	str	r3, [sp, #4]
  Timing.DataSetupTime = 6;
 8001046:	9303      	str	r3, [sp, #12]
  Timing.BusTurnAroundDuration = 0;
  Timing.CLKDivision = 16;
 8001048:	2310      	movs	r3, #16
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 800104a:	2200      	movs	r2, #0
  Timing.AddressHoldTime = 15;
 800104c:	9102      	str	r1, [sp, #8]
  Timing.CLKDivision = 16;
 800104e:	9305      	str	r3, [sp, #20]
  Timing.DataLatency = 17;
  Timing.AccessMode = FMC_ACCESS_MODE_A;
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8001050:	a901      	add	r1, sp, #4
  Timing.DataLatency = 17;
 8001052:	2311      	movs	r3, #17
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 8001054:	6082      	str	r2, [r0, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8001056:	60c2      	str	r2, [r0, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8001058:	6102      	str	r2, [r0, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_8;
 800105a:	6142      	str	r2, [r0, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 800105c:	6182      	str	r2, [r0, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 800105e:	61c2      	str	r2, [r0, #28]
  hsram1.Init.WrapMode = FMC_WRAP_MODE_DISABLE;
 8001060:	6202      	str	r2, [r0, #32]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8001062:	6242      	str	r2, [r0, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8001064:	62c2      	str	r2, [r0, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8001066:	6302      	str	r2, [r0, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001068:	6342      	str	r2, [r0, #52]	; 0x34
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 800106a:	6382      	str	r2, [r0, #56]	; 0x38
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 800106c:	63c2      	str	r2, [r0, #60]	; 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 800106e:	6442      	str	r2, [r0, #68]	; 0x44
  Timing.BusTurnAroundDuration = 0;
 8001070:	9204      	str	r2, [sp, #16]
  Timing.DataLatency = 17;
 8001072:	9306      	str	r3, [sp, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8001074:	9207      	str	r2, [sp, #28]
  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8001076:	f7ff fe55 	bl	8000d24 <HAL_SRAM_Init>
 800107a:	b118      	cbz	r0, 8001084 <MX_FMC_Init+0x5c>
  {
    _Error_Handler(__FILE__, __LINE__);
 800107c:	2157      	movs	r1, #87	; 0x57
 800107e:	4804      	ldr	r0, [pc, #16]	; (8001090 <MX_FMC_Init+0x68>)
 8001080:	f000 fa74 	bl	800156c <_Error_Handler>
  }

}
 8001084:	b009      	add	sp, #36	; 0x24
 8001086:	f85d fb04 	ldr.w	pc, [sp], #4
 800108a:	bf00      	nop
 800108c:	2001e87c 	.word	0x2001e87c
 8001090:	08001720 	.word	0x08001720

08001094 <HAL_SRAM_MspInit>:
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8001094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FMC_Initialized) {
 8001098:	4b2c      	ldr	r3, [pc, #176]	; (800114c <HAL_SRAM_MspInit+0xb8>)
 800109a:	681c      	ldr	r4, [r3, #0]
void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 800109c:	b086      	sub	sp, #24
  if (FMC_Initialized) {
 800109e:	2c00      	cmp	r4, #0
 80010a0:	d151      	bne.n	8001146 <HAL_SRAM_MspInit+0xb2>
  FMC_Initialized = 1;
 80010a2:	f04f 0801 	mov.w	r8, #1
 80010a6:	f8c3 8000 	str.w	r8, [r3]
  __HAL_RCC_FMC_CLK_ENABLE();
 80010aa:	4b29      	ldr	r3, [pc, #164]	; (8001150 <HAL_SRAM_MspInit+0xbc>)
 80010ac:	9400      	str	r4, [sp, #0]
 80010ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010b0:	4828      	ldr	r0, [pc, #160]	; (8001154 <HAL_SRAM_MspInit+0xc0>)
  __HAL_RCC_FMC_CLK_ENABLE();
 80010b2:	ea42 0208 	orr.w	r2, r2, r8
 80010b6:	639a      	str	r2, [r3, #56]	; 0x38
 80010b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ba:	9403      	str	r4, [sp, #12]
  __HAL_RCC_FMC_CLK_ENABLE();
 80010bc:	ea03 0308 	and.w	r3, r3, r8
 80010c0:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c2:	2702      	movs	r7, #2
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c4:	2603      	movs	r6, #3
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80010c6:	250c      	movs	r5, #12
  __HAL_RCC_FMC_CLK_ENABLE();
 80010c8:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ca:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pin = GPIO_PIN_3|D4_Pin|D5_Pin|D6_Pin 
 80010cc:	f64f 738b 	movw	r3, #65419	; 0xff8b
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010d0:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Pin = GPIO_PIN_3|D4_Pin|D5_Pin|D6_Pin 
 80010d2:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d4:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80010d6:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010d8:	f7ff fae2 	bl	80006a0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin 
 80010dc:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80010e0:	a901      	add	r1, sp, #4
 80010e2:	481d      	ldr	r0, [pc, #116]	; (8001158 <HAL_SRAM_MspInit+0xc4>)
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin 
 80010e4:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e6:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e8:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ea:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80010ec:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80010ee:	f7ff fad7 	bl	80006a0 <HAL_GPIO_Init>
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80010f2:	a901      	add	r1, sp, #4
 80010f4:	4819      	ldr	r0, [pc, #100]	; (800115c <HAL_SRAM_MspInit+0xc8>)
  GPIO_InitStruct.Pin = SDNWE_Pin;
 80010f6:	f8cd 8004 	str.w	r8, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fa:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fc:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010fe:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001100:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8001102:	f7ff facd 	bl	80006a0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin 
 8001106:	f248 1333 	movw	r3, #33075	; 0x8133
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800110a:	a901      	add	r1, sp, #4
 800110c:	4814      	ldr	r0, [pc, #80]	; (8001160 <HAL_SRAM_MspInit+0xcc>)
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin 
 800110e:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001110:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001112:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001114:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001116:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001118:	f7ff fac2 	bl	80006a0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin 
 800111c:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001120:	a901      	add	r1, sp, #4
 8001122:	4810      	ldr	r0, [pc, #64]	; (8001164 <HAL_SRAM_MspInit+0xd0>)
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin 
 8001124:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001126:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001128:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800112a:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800112c:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800112e:	f7ff fab7 	bl	80006a0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8001132:	2360      	movs	r3, #96	; 0x60
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001134:	a901      	add	r1, sp, #4
 8001136:	480c      	ldr	r0, [pc, #48]	; (8001168 <HAL_SRAM_MspInit+0xd4>)
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8001138:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113a:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113c:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800113e:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001140:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001142:	f7ff faad 	bl	80006a0 <HAL_GPIO_Init>
  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001146:	b006      	add	sp, #24
 8001148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800114c:	2001e874 	.word	0x2001e874
 8001150:	40023800 	.word	0x40023800
 8001154:	40021000 	.word	0x40021000
 8001158:	40021400 	.word	0x40021400
 800115c:	40020800 	.word	0x40020800
 8001160:	40021800 	.word	0x40021800
 8001164:	40020c00 	.word	0x40020c00
 8001168:	40020400 	.word	0x40020400

0800116c <MX_GPIO_Init>:
     PG12   ------> LTDC_B4
     PB8   ------> LTDC_B6
     PB9   ------> LTDC_B7
*/
void MX_GPIO_Init(void)
{
 800116c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001170:	b091      	sub	sp, #68	; 0x44

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001172:	2600      	movs	r6, #0
 8001174:	4aad      	ldr	r2, [pc, #692]	; (800142c <MX_GPIO_Init+0x2c0>)
 8001176:	9603      	str	r6, [sp, #12]
 8001178:	6b11      	ldr	r1, [r2, #48]	; 0x30
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOG_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 800117a:	f8df 82c0 	ldr.w	r8, [pc, #704]	; 800143c <MX_GPIO_Init+0x2d0>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 800117e:	4fac      	ldr	r7, [pc, #688]	; (8001430 <MX_GPIO_Init+0x2c4>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8001180:	f8df b2bc 	ldr.w	fp, [pc, #700]	; 8001440 <MX_GPIO_Init+0x2d4>
  GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001184:	4dab      	ldr	r5, [pc, #684]	; (8001434 <MX_GPIO_Init+0x2c8>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001186:	f8df 92bc 	ldr.w	r9, [pc, #700]	; 8001444 <MX_GPIO_Init+0x2d8>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800118a:	f041 0110 	orr.w	r1, r1, #16
 800118e:	6311      	str	r1, [r2, #48]	; 0x30
 8001190:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001192:	f001 0110 	and.w	r1, r1, #16
 8001196:	9103      	str	r1, [sp, #12]
 8001198:	9903      	ldr	r1, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800119a:	9604      	str	r6, [sp, #16]
 800119c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800119e:	f041 0104 	orr.w	r1, r1, #4
 80011a2:	6311      	str	r1, [r2, #48]	; 0x30
 80011a4:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80011a6:	f001 0104 	and.w	r1, r1, #4
 80011aa:	9104      	str	r1, [sp, #16]
 80011ac:	9904      	ldr	r1, [sp, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011ae:	9605      	str	r6, [sp, #20]
 80011b0:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80011b2:	f041 0120 	orr.w	r1, r1, #32
 80011b6:	6311      	str	r1, [r2, #48]	; 0x30
 80011b8:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80011ba:	f001 0120 	and.w	r1, r1, #32
 80011be:	9105      	str	r1, [sp, #20]
 80011c0:	9905      	ldr	r1, [sp, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011c2:	9606      	str	r6, [sp, #24]
 80011c4:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80011c6:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80011ca:	6311      	str	r1, [r2, #48]	; 0x30
 80011cc:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80011ce:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80011d2:	9106      	str	r1, [sp, #24]
 80011d4:	9906      	ldr	r1, [sp, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d6:	9607      	str	r6, [sp, #28]
 80011d8:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80011da:	f041 0101 	orr.w	r1, r1, #1
 80011de:	6311      	str	r1, [r2, #48]	; 0x30
 80011e0:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80011e2:	f001 0101 	and.w	r1, r1, #1
 80011e6:	9107      	str	r1, [sp, #28]
 80011e8:	9907      	ldr	r1, [sp, #28]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ea:	9608      	str	r6, [sp, #32]
 80011ec:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80011ee:	f041 0102 	orr.w	r1, r1, #2
 80011f2:	6311      	str	r1, [r2, #48]	; 0x30
 80011f4:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80011f6:	f001 0102 	and.w	r1, r1, #2
 80011fa:	9108      	str	r1, [sp, #32]
 80011fc:	9908      	ldr	r1, [sp, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80011fe:	9609      	str	r6, [sp, #36]	; 0x24
 8001200:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001202:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8001206:	6311      	str	r1, [r2, #48]	; 0x30
 8001208:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800120a:	f001 0140 	and.w	r1, r1, #64	; 0x40
 800120e:	9109      	str	r1, [sp, #36]	; 0x24
 8001210:	9909      	ldr	r1, [sp, #36]	; 0x24
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001212:	960a      	str	r6, [sp, #40]	; 0x28
 8001214:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001216:	f041 0108 	orr.w	r1, r1, #8
 800121a:	6311      	str	r1, [r2, #48]	; 0x30
 800121c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800121e:	f002 0208 	and.w	r2, r2, #8
 8001222:	920a      	str	r2, [sp, #40]	; 0x28
 8001224:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8001226:	4640      	mov	r0, r8
 8001228:	4632      	mov	r2, r6
 800122a:	2116      	movs	r1, #22
 800122c:	f7ff fb24 	bl	8000878 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8001230:	4632      	mov	r2, r6
 8001232:	4638      	mov	r0, r7
 8001234:	2180      	movs	r1, #128	; 0x80
 8001236:	f7ff fb1f 	bl	8000878 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 800123a:	4632      	mov	r2, r6
 800123c:	4658      	mov	r0, fp
 800123e:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8001242:	f7ff fb19 	bl	8000878 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8001246:	4632      	mov	r2, r6
 8001248:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 800124c:	487a      	ldr	r0, [pc, #488]	; (8001438 <MX_GPIO_Init+0x2cc>)
 800124e:	f7ff fb13 	bl	8000878 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8001252:	f44f 7260 	mov.w	r2, #896	; 0x380
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001256:	2402      	movs	r4, #2
  GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8001258:	920b      	str	r2, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800125a:	a90b      	add	r1, sp, #44	; 0x2c
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800125c:	2205      	movs	r2, #5
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800125e:	4628      	mov	r0, r5
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001260:	f04f 0a0e 	mov.w	sl, #14
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001264:	920f      	str	r2, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001266:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001268:	960d      	str	r6, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126a:	960e      	str	r6, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800126c:	f7ff fa18 	bl	80006a0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ENABLE_Pin;
 8001270:	f44f 6280 	mov.w	r2, #1024	; 0x400
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001274:	a90b      	add	r1, sp, #44	; 0x2c
 8001276:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = ENABLE_Pin;
 8001278:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800127a:	2501      	movs	r5, #1
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127c:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127e:	960d      	str	r6, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001280:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001282:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001286:	f7ff fa0b 	bl	80006a0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 800128a:	2216      	movs	r2, #22
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800128c:	a90b      	add	r1, sp, #44	; 0x2c
 800128e:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8001290:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001292:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001294:	960d      	str	r6, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001296:	960e      	str	r6, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001298:	f7ff fa02 	bl	80006a0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 800129c:	f248 0207 	movw	r2, #32775	; 0x8007
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a0:	a90b      	add	r1, sp, #44	; 0x2c
 80012a2:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 80012a4:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80012a6:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012aa:	960d      	str	r6, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ac:	f7ff f9f8 	bl	80006a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin 
                           PAPin */
  GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin 
 80012b0:	f641 0258 	movw	r2, #6232	; 0x1858
                          |R5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b4:	a90b      	add	r1, sp, #44	; 0x2c
 80012b6:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin 
 80012b8:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ba:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012bc:	960d      	str	r6, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012be:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80012c0:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c4:	f7ff f9ec 	bl	80006a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 80012c8:	2280      	movs	r2, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 80012ca:	a90b      	add	r1, sp, #44	; 0x2c
 80012cc:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 80012ce:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d0:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d2:	960d      	str	r6, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d4:	960e      	str	r6, [sp, #56]	; 0x38
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 80012d6:	f7ff f9e3 	bl	80006a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 80012da:	2220      	movs	r2, #32
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80012dc:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 80012e0:	a90b      	add	r1, sp, #44	; 0x2c
  GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012e2:	f8df 9164 	ldr.w	r9, [pc, #356]	; 8001448 <MX_GPIO_Init+0x2dc>
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 80012e6:	920b      	str	r2, [sp, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 80012e8:	4640      	mov	r0, r8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ea:	960d      	str	r6, [sp, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 80012ec:	f7ff f9d8 	bl	80006a0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80012f0:	2303      	movs	r3, #3
 80012f2:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012f4:	a90b      	add	r1, sp, #44	; 0x2c
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80012f6:	2309      	movs	r3, #9
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012f8:	4648      	mov	r0, r9
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80012fa:	930f      	str	r3, [sp, #60]	; 0x3c
 80012fc:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fe:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001300:	960d      	str	r6, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001302:	960e      	str	r6, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001304:	f7ff f9cc 	bl	80006a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001308:	2204      	movs	r2, #4
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800130a:	a90b      	add	r1, sp, #44	; 0x2c
 800130c:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800130e:	920b      	str	r2, [sp, #44]	; 0x2c
 8001310:	9200      	str	r2, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001312:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001314:	960d      	str	r6, [sp, #52]	; 0x34
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001316:	f7ff f9c3 	bl	80006a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 800131a:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 800131e:	910b      	str	r1, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001320:	4648      	mov	r0, r9
 8001322:	a90b      	add	r1, sp, #44	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001324:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001326:	960d      	str	r6, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001328:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800132a:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800132e:	f7ff f9b7 	bl	80006a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8001332:	f44f 4150 	mov.w	r1, #53248	; 0xd000
 8001336:	910b      	str	r1, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8001338:	210c      	movs	r1, #12
 800133a:	910f      	str	r1, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800133c:	4648      	mov	r0, r9
 800133e:	a90b      	add	r1, sp, #44	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001340:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001342:	960d      	str	r6, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001344:	960e      	str	r6, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001346:	f7ff f9ab 	bl	80006a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800134a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800134e:	910b      	str	r1, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8001350:	4648      	mov	r0, r9
 8001352:	a90b      	add	r1, sp, #44	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001354:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001356:	960d      	str	r6, [sp, #52]	; 0x34
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8001358:	f7ff f9a2 	bl	80006a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TE_Pin;
 800135c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001360:	910b      	str	r1, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8001362:	4658      	mov	r0, fp
 8001364:	a90b      	add	r1, sp, #44	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001366:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001368:	960d      	str	r6, [sp, #52]	; 0x34
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 800136a:	f7ff f999 	bl	80006a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 800136e:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8001372:	910b      	str	r1, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001374:	4658      	mov	r0, fp
 8001376:	a90b      	add	r1, sp, #44	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001378:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137a:	960d      	str	r6, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137c:	960e      	str	r6, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800137e:	f7ff f98f 	bl	80006a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8001382:	f44f 610c 	mov.w	r1, #2240	; 0x8c0
 8001386:	910b      	str	r1, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001388:	482b      	ldr	r0, [pc, #172]	; (8001438 <MX_GPIO_Init+0x2cc>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138a:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800138c:	a90b      	add	r1, sp, #44	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138e:	960d      	str	r6, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001390:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001392:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001396:	f7ff f983 	bl	80006a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 800139a:	f44f 6198 	mov.w	r1, #1216	; 0x4c0
 800139e:	910b      	str	r1, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013a0:	4640      	mov	r0, r8
 80013a2:	a90b      	add	r1, sp, #44	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a4:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a6:	960d      	str	r6, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a8:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80013aa:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013ae:	f7ff f977 	bl	80006a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80013b2:	f44f 7100 	mov.w	r1, #512	; 0x200
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80013b6:	9a00      	ldr	r2, [sp, #0]
  GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80013b8:	910b      	str	r1, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013ba:	f04f 0912 	mov.w	r9, #18
  HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80013be:	a90b      	add	r1, sp, #44	; 0x2c
 80013c0:	4640      	mov	r0, r8
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80013c2:	920f      	str	r2, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013c4:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013c8:	950d      	str	r5, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ca:	960e      	str	r6, [sp, #56]	; 0x38
  HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80013cc:	f7ff f968 	bl	80006a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80013d0:	f44f 7180 	mov.w	r1, #256	; 0x100
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80013d4:	9a00      	ldr	r2, [sp, #0]
  GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80013d6:	910b      	str	r1, [sp, #44]	; 0x2c
  HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 80013d8:	4638      	mov	r0, r7
 80013da:	a90b      	add	r1, sp, #44	; 0x2c
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80013dc:	920f      	str	r2, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013de:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013e2:	950d      	str	r5, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e4:	960e      	str	r6, [sp, #56]	; 0x38
  HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 80013e6:	f7ff f95b 	bl	80006a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80013ea:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ee:	2303      	movs	r3, #3
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80013f0:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f2:	a90b      	add	r1, sp, #44	; 0x2c
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80013f4:	2207      	movs	r2, #7
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f6:	4638      	mov	r0, r7
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013f8:	930e      	str	r3, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80013fa:	920f      	str	r2, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013fc:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fe:	960d      	str	r6, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001400:	f7ff f94e 	bl	80006a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8001404:	2248      	movs	r2, #72	; 0x48
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001406:	a90b      	add	r1, sp, #44	; 0x2c
 8001408:	4658      	mov	r0, fp
  GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 800140a:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800140c:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140e:	960d      	str	r6, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001410:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001412:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001416:	f7ff f943 	bl	80006a0 <HAL_GPIO_Init>
  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800141a:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800141c:	4806      	ldr	r0, [pc, #24]	; (8001438 <MX_GPIO_Init+0x2cc>)
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800141e:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8001420:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001424:	a90b      	add	r1, sp, #44	; 0x2c
  GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8001426:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001428:	940c      	str	r4, [sp, #48]	; 0x30
 800142a:	e00f      	b.n	800144c <MX_GPIO_Init+0x2e0>
 800142c:	40023800 	.word	0x40023800
 8001430:	40020000 	.word	0x40020000
 8001434:	40021400 	.word	0x40021400
 8001438:	40021800 	.word	0x40021800
 800143c:	40020800 	.word	0x40020800
 8001440:	40020c00 	.word	0x40020c00
 8001444:	10120000 	.word	0x10120000
 8001448:	40020400 	.word	0x40020400
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144c:	960d      	str	r6, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144e:	960e      	str	r6, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001450:	f7ff f926 	bl	80006a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8001454:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001458:	a90b      	add	r1, sp, #44	; 0x2c
 800145a:	4805      	ldr	r0, [pc, #20]	; (8001470 <MX_GPIO_Init+0x304>)
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 800145c:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800145e:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001460:	960d      	str	r6, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001462:	960e      	str	r6, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001464:	f7ff f91c 	bl	80006a0 <HAL_GPIO_Init>

}
 8001468:	b011      	add	sp, #68	; 0x44
 800146a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800146e:	bf00      	nop
 8001470:	40021800 	.word	0x40021800

08001474 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001474:	b510      	push	{r4, lr}
 8001476:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001478:	2300      	movs	r3, #0
 800147a:	4a27      	ldr	r2, [pc, #156]	; (8001518 <SystemClock_Config+0xa4>)
 800147c:	9301      	str	r3, [sp, #4]
 800147e:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8001480:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8001484:	6411      	str	r1, [r2, #64]	; 0x40
 8001486:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001488:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800148c:	9201      	str	r2, [sp, #4]
 800148e:	9a01      	ldr	r2, [sp, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001490:	4a22      	ldr	r2, [pc, #136]	; (800151c <SystemClock_Config+0xa8>)
 8001492:	9302      	str	r3, [sp, #8]
 8001494:	6811      	ldr	r1, [r2, #0]
 8001496:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 800149a:	6011      	str	r1, [r2, #0]
 800149c:	6812      	ldr	r2, [r2, #0]
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800149e:	930f      	str	r3, [sp, #60]	; 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014a0:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
  RCC_OscInitStruct.PLL.PLLM = 8;
 80014a4:	2308      	movs	r3, #8
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014a6:	9202      	str	r2, [sp, #8]
 80014a8:	9a02      	ldr	r2, [sp, #8]
  RCC_OscInitStruct.PLL.PLLM = 8;
 80014aa:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014ac:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLN = 168;
 80014ae:	23a8      	movs	r3, #168	; 0xa8
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014b0:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014b2:	920b      	str	r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLN = 168;
 80014b4:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80014b6:	2210      	movs	r2, #16
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80014b8:	2307      	movs	r3, #7
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014ba:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014bc:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80014be:	920c      	str	r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014c0:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014c2:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80014c4:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014c6:	f7ff f9dd 	bl	8000884 <HAL_RCC_OscConfig>
 80014ca:	b100      	cbz	r0, 80014ce <SystemClock_Config+0x5a>
 80014cc:	e7fe      	b.n	80014cc <SystemClock_Config+0x58>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014ce:	230f      	movs	r3, #15
 80014d0:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80014d2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014d6:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80014d8:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80014da:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80014dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80014e0:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014e2:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80014e4:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80014e6:	f7ff fb7d 	bl	8000be4 <HAL_RCC_ClockConfig>
 80014ea:	4604      	mov	r4, r0
 80014ec:	b100      	cbz	r0, 80014f0 <SystemClock_Config+0x7c>
 80014ee:	e7fe      	b.n	80014ee <SystemClock_Config+0x7a>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80014f0:	f7ff fc12 	bl	8000d18 <HAL_RCC_GetHCLKFreq>
 80014f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014f8:	fbb0 f0f3 	udiv	r0, r0, r3
 80014fc:	f7ff f8a8 	bl	8000650 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001500:	2004      	movs	r0, #4
 8001502:	f7ff f8bb 	bl	800067c <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001506:	4622      	mov	r2, r4
 8001508:	4621      	mov	r1, r4
 800150a:	f04f 30ff 	mov.w	r0, #4294967295
 800150e:	f7ff f86b 	bl	80005e8 <HAL_NVIC_SetPriority>
}
 8001512:	b014      	add	sp, #80	; 0x50
 8001514:	bd10      	pop	{r4, pc}
 8001516:	bf00      	nop
 8001518:	40023800 	.word	0x40023800
 800151c:	40007000 	.word	0x40007000

08001520 <main>:
{
 8001520:	b507      	push	{r0, r1, r2, lr}
  HAL_Init();
 8001522:	f7ff f80f 	bl	8000544 <HAL_Init>
  SystemClock_Config();
 8001526:	f7ff ffa5 	bl	8001474 <SystemClock_Config>
  MX_GPIO_Init();
 800152a:	f7ff fe1f 	bl	800116c <MX_GPIO_Init>
  MX_FMC_Init();
 800152e:	f7ff fd7b 	bl	8001028 <MX_FMC_Init>
  ILI9341_Init();
 8001532:	f7ff fcb9 	bl	8000ea8 <ILI9341_Init>
  ILI9341_setRotation(4);
 8001536:	2004      	movs	r0, #4
 8001538:	f7ff fd4c 	bl	8000fd4 <ILI9341_setRotation>
  ILI9341_Fill(COLOR_WHITE);
 800153c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001540:	f7ff fd0c 	bl	8000f5c <ILI9341_Fill>
	HAL_Delay(2000);
 8001544:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001548:	f7ff f828 	bl	800059c <HAL_Delay>
	ILI9341_printImage(115, 50, 250, 250, myImage, sizeof(myImage));
 800154c:	4b05      	ldr	r3, [pc, #20]	; (8001564 <main+0x44>)
 800154e:	9301      	str	r3, [sp, #4]
 8001550:	4b05      	ldr	r3, [pc, #20]	; (8001568 <main+0x48>)
 8001552:	9300      	str	r3, [sp, #0]
 8001554:	23fa      	movs	r3, #250	; 0xfa
 8001556:	461a      	mov	r2, r3
 8001558:	2132      	movs	r1, #50	; 0x32
 800155a:	2073      	movs	r0, #115	; 0x73
 800155c:	f7ff fd24 	bl	8000fa8 <ILI9341_printImage>
 8001560:	e7fe      	b.n	8001560 <main+0x40>
 8001562:	bf00      	nop
 8001564:	0001e848 	.word	0x0001e848
 8001568:	20000009 	.word	0x20000009

0800156c <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 800156c:	e7fe      	b.n	800156c <_Error_Handler>
	...

08001570 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001570:	b513      	push	{r0, r1, r4, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001572:	4b22      	ldr	r3, [pc, #136]	; (80015fc <HAL_MspInit+0x8c>)
 8001574:	2400      	movs	r4, #0
 8001576:	9400      	str	r4, [sp, #0]
 8001578:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800157a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800157e:	645a      	str	r2, [r3, #68]	; 0x44
 8001580:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001582:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001586:	9200      	str	r2, [sp, #0]
 8001588:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800158a:	9401      	str	r4, [sp, #4]
 800158c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800158e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001592:	641a      	str	r2, [r3, #64]	; 0x40
 8001594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800159a:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800159c:	2007      	movs	r0, #7
  __HAL_RCC_PWR_CLK_ENABLE();
 800159e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80015a0:	f7ff f810 	bl	80005c4 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80015a4:	4622      	mov	r2, r4
 80015a6:	4621      	mov	r1, r4
 80015a8:	f06f 000b 	mvn.w	r0, #11
 80015ac:	f7ff f81c 	bl	80005e8 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80015b0:	4622      	mov	r2, r4
 80015b2:	4621      	mov	r1, r4
 80015b4:	f06f 000a 	mvn.w	r0, #10
 80015b8:	f7ff f816 	bl	80005e8 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80015bc:	4622      	mov	r2, r4
 80015be:	4621      	mov	r1, r4
 80015c0:	f06f 0009 	mvn.w	r0, #9
 80015c4:	f7ff f810 	bl	80005e8 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80015c8:	4622      	mov	r2, r4
 80015ca:	4621      	mov	r1, r4
 80015cc:	f06f 0004 	mvn.w	r0, #4
 80015d0:	f7ff f80a 	bl	80005e8 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80015d4:	4622      	mov	r2, r4
 80015d6:	4621      	mov	r1, r4
 80015d8:	f06f 0003 	mvn.w	r0, #3
 80015dc:	f7ff f804 	bl	80005e8 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80015e0:	4622      	mov	r2, r4
 80015e2:	4621      	mov	r1, r4
 80015e4:	f06f 0001 	mvn.w	r0, #1
 80015e8:	f7fe fffe 	bl	80005e8 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80015ec:	4622      	mov	r2, r4
 80015ee:	4621      	mov	r1, r4
 80015f0:	f04f 30ff 	mov.w	r0, #4294967295
 80015f4:	f7fe fff8 	bl	80005e8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015f8:	b002      	add	sp, #8
 80015fa:	bd10      	pop	{r4, pc}
 80015fc:	40023800 	.word	0x40023800

08001600 <NMI_Handler>:
 8001600:	4770      	bx	lr

08001602 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8001602:	e7fe      	b.n	8001602 <HardFault_Handler>

08001604 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8001604:	e7fe      	b.n	8001604 <MemManage_Handler>

08001606 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8001606:	e7fe      	b.n	8001606 <BusFault_Handler>

08001608 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8001608:	e7fe      	b.n	8001608 <UsageFault_Handler>

0800160a <SVC_Handler>:
 800160a:	4770      	bx	lr

0800160c <DebugMon_Handler>:
 800160c:	4770      	bx	lr

0800160e <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 800160e:	4770      	bx	lr

08001610 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001610:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001612:	f7fe ffb1 	bl	8000578 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001616:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 800161a:	f7ff b83c 	b.w	8000696 <HAL_SYSTICK_IRQHandler>
	...

08001620 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001620:	490f      	ldr	r1, [pc, #60]	; (8001660 <SystemInit+0x40>)
 8001622:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001626:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800162a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800162e:	4b0d      	ldr	r3, [pc, #52]	; (8001664 <SystemInit+0x44>)
 8001630:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001632:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8001634:	f042 0201 	orr.w	r2, r2, #1
 8001638:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800163a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001642:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001646:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001648:	4a07      	ldr	r2, [pc, #28]	; (8001668 <SystemInit+0x48>)
 800164a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001652:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001654:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001656:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800165a:	608b      	str	r3, [r1, #8]
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	e000ed00 	.word	0xe000ed00
 8001664:	40023800 	.word	0x40023800
 8001668:	24003010 	.word	0x24003010

0800166c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800166c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016a4 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001670:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001672:	e003      	b.n	800167c <LoopCopyDataInit>

08001674 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001674:	4b0c      	ldr	r3, [pc, #48]	; (80016a8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001676:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001678:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800167a:	3104      	adds	r1, #4

0800167c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800167c:	480b      	ldr	r0, [pc, #44]	; (80016ac <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800167e:	4b0c      	ldr	r3, [pc, #48]	; (80016b0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001680:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001682:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001684:	d3f6      	bcc.n	8001674 <CopyDataInit>
  ldr  r2, =_sbss
 8001686:	4a0b      	ldr	r2, [pc, #44]	; (80016b4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001688:	e002      	b.n	8001690 <LoopFillZerobss>

0800168a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800168a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800168c:	f842 3b04 	str.w	r3, [r2], #4

08001690 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001690:	4b09      	ldr	r3, [pc, #36]	; (80016b8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001692:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001694:	d3f9      	bcc.n	800168a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001696:	f7ff ffc3 	bl	8001620 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800169a:	f000 f811 	bl	80016c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800169e:	f7ff ff3f 	bl	8001520 <main>
  bx  lr    
 80016a2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80016a4:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80016a8:	08001750 	.word	0x08001750
  ldr  r0, =_sdata
 80016ac:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80016b0:	2001e858 	.word	0x2001e858
  ldr  r2, =_sbss
 80016b4:	2001e858 	.word	0x2001e858
  ldr  r3, = _ebss
 80016b8:	2001e8cc 	.word	0x2001e8cc

080016bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016bc:	e7fe      	b.n	80016bc <ADC_IRQHandler>
	...

080016c0 <__libc_init_array>:
 80016c0:	b570      	push	{r4, r5, r6, lr}
 80016c2:	4e0d      	ldr	r6, [pc, #52]	; (80016f8 <__libc_init_array+0x38>)
 80016c4:	4c0d      	ldr	r4, [pc, #52]	; (80016fc <__libc_init_array+0x3c>)
 80016c6:	1ba4      	subs	r4, r4, r6
 80016c8:	10a4      	asrs	r4, r4, #2
 80016ca:	2500      	movs	r5, #0
 80016cc:	42a5      	cmp	r5, r4
 80016ce:	d109      	bne.n	80016e4 <__libc_init_array+0x24>
 80016d0:	4e0b      	ldr	r6, [pc, #44]	; (8001700 <__libc_init_array+0x40>)
 80016d2:	4c0c      	ldr	r4, [pc, #48]	; (8001704 <__libc_init_array+0x44>)
 80016d4:	f000 f818 	bl	8001708 <_init>
 80016d8:	1ba4      	subs	r4, r4, r6
 80016da:	10a4      	asrs	r4, r4, #2
 80016dc:	2500      	movs	r5, #0
 80016de:	42a5      	cmp	r5, r4
 80016e0:	d105      	bne.n	80016ee <__libc_init_array+0x2e>
 80016e2:	bd70      	pop	{r4, r5, r6, pc}
 80016e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80016e8:	4798      	blx	r3
 80016ea:	3501      	adds	r5, #1
 80016ec:	e7ee      	b.n	80016cc <__libc_init_array+0xc>
 80016ee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80016f2:	4798      	blx	r3
 80016f4:	3501      	adds	r5, #1
 80016f6:	e7f2      	b.n	80016de <__libc_init_array+0x1e>
 80016f8:	08001748 	.word	0x08001748
 80016fc:	08001748 	.word	0x08001748
 8001700:	08001748 	.word	0x08001748
 8001704:	0800174c 	.word	0x0800174c

08001708 <_init>:
 8001708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800170a:	bf00      	nop
 800170c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800170e:	bc08      	pop	{r3}
 8001710:	469e      	mov	lr, r3
 8001712:	4770      	bx	lr

08001714 <_fini>:
 8001714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001716:	bf00      	nop
 8001718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800171a:	bc08      	pop	{r3}
 800171c:	469e      	mov	lr, r3
 800171e:	4770      	bx	lr
